{
  "createdAt": "2025-10-22T11:58:40.049Z",
  "updatedAt": "2025-10-26T23:45:06.624Z",
  "id": "aRonGjwfYoY1UUHH",
  "name": "sw_chat_interations_v2",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "usr_id"
            },
            {
              "name": "body.instance"
            },
            {
              "name": "body.data.key.id"
            },
            {
              "name": "body.data.key.remoteJid"
            },
            {
              "name": "body.data.key.fromMe",
              "type": "boolean"
            },
            {
              "name": "body.data.pushName"
            },
            {
              "name": "body.data.message.conversation"
            },
            {
              "name": "body.data.messageType"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -4032,
        160
      ],
      "id": "587351b1-257b-4c6f-a823-9d7b2aaa037c",
      "name": "start"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.nome,\n  u.id,\n  u.nome_preferencia,\n  u.nome_assistente,\n  u.token_acesso,\n  u.cronotipo_detectado,\n  u.whatsapp_numero,\n  u.faixa_etaria,\n  COALESCE(p.perfil_primario, 'neutro') perfil_primario\nFROM usuarios u\nLEFT JOIN perfis_big_five p\n  ON p.usuario_id = u.id\nWHERE u.id = $1;\n",
        "options": {
          "queryReplacement": "={{ $('start').item.json.usr_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3648,
        160
      ],
      "id": "49676ba2-9148-4515-b771-9d7e404290be",
      "name": "dados_usr",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH periodo AS (\n  SELECT CURRENT_DATE - INTERVAL '29 days' AS inicio\n),\ndados AS (\n  SELECT up.*\n  FROM usuarios_perfis up\n  JOIN periodo p ON up.data_conversa >= p.inicio\n  WHERE up.usuario_id = $1\n),\ncalc AS (\n  SELECT 'openness'::text AS trait,\n         SUM(up.score_openness * up.confianca_openness)::numeric AS weighted_sum,\n         SUM(up.confianca_openness)::numeric AS conf_sum,\n         AVG(up.score_openness)::numeric AS avg_score,\n         AVG(up.confianca_openness)::numeric AS avg_conf\n  FROM dados up\n  UNION ALL\n  SELECT 'conscientiousness',\n         SUM(up.score_conscientiousness * up.confianca_conscientiousness)::numeric,\n         SUM(up.confianca_conscientiousness)::numeric,\n         AVG(up.score_conscientiousness)::numeric,\n         AVG(up.confianca_conscientiousness)::numeric\n  FROM dados up\n  UNION ALL\n  SELECT 'extraversion',\n         SUM(up.score_extraversion * up.confianca_extraversion)::numeric,\n         SUM(up.confianca_extraversion)::numeric,\n         AVG(up.score_extraversion)::numeric,\n         AVG(up.confianca_extraversion)::numeric\n  FROM dados up\n  UNION ALL\n  SELECT 'agreeableness',\n         SUM(up.score_agreeableness * up.confianca_agreeableness)::numeric,\n         SUM(up.confianca_agreeableness)::numeric,\n         AVG(up.score_agreeableness)::numeric,\n         AVG(up.confianca_agreeableness)::numeric\n  FROM dados up\n  UNION ALL\n  SELECT 'neuroticism',\n         SUM(up.score_neuroticism * up.confianca_neuroticism)::numeric,\n         SUM(up.confianca_neuroticism)::numeric,\n         AVG(up.score_neuroticism)::numeric,\n         AVG(up.confianca_neuroticism)::numeric\n  FROM dados up\n),\nscores AS (\n  SELECT\n    trait,\n    CASE\n      WHEN conf_sum > 0 THEN weighted_sum / conf_sum\n      ELSE avg_score\n    END AS score_ponderado,\n    avg_score,\n    avg_conf,\n    conf_sum\n  FROM calc\n  WHERE conf_sum > 0 OR avg_score IS NOT NULL\n),\nordenado AS (\n  SELECT\n    trait,\n    score_ponderado,\n    ROW_NUMBER() OVER (ORDER BY score_ponderado DESC NULLS LAST) AS pos\n  FROM scores\n),\nlabels AS (\n  SELECT * FROM (VALUES\n    ('openness','Abertura'),\n    ('conscientiousness','Conscienciosidade'),\n    ('extraversion','Extroversão'),\n    ('agreeableness','Amabilidade'),\n    ('neuroticism','Neuroticismo')\n  ) AS l(trait,label)\n)\nSELECT\n  (SELECT trait FROM ordenado WHERE pos = 1) AS perfil_primario,\n  (SELECT trait FROM ordenado WHERE pos = 2) AS perfil_secundario,\n  COALESCE((SELECT ROUND(AVG(avg_conf), 1) FROM scores WHERE avg_conf IS NOT NULL), 0) AS confianca_media,\n  COALESCE((SELECT bool_or(insuficiente) FROM dados), false) AS insuficiente,\n  json_build_object(\n    'openness', (SELECT json_build_object('score_ponderado', ROUND(score_ponderado, 1), 'media_score', ROUND(avg_score, 1), 'media_confianca', ROUND(avg_conf, 1), 'total_confianca', ROUND(conf_sum, 1)) FROM scores WHERE trait = 'openness'),\n    'conscientiousness', (SELECT json_build_object('score_ponderado', ROUND(score_ponderado, 1), 'media_score', ROUND(avg_score, 1), 'media_confianca', ROUND(avg_conf, 1), 'total_confianca', ROUND(conf_sum, 1)) FROM scores WHERE trait = 'conscientiousness'),\n    'extraversion', (SELECT json_build_object('score_ponderado', ROUND(score_ponderado, 1), 'media_score', ROUND(avg_score, 1), 'media_confianca', ROUND(avg_conf, 1), 'total_confianca', ROUND(conf_sum, 1)) FROM scores WHERE trait = 'extraversion'),\n    'agreeableness', (SELECT json_build_object('score_ponderado', ROUND(score_ponderado, 1), 'media_score', ROUND(avg_score, 1), 'media_confianca', ROUND(avg_conf, 1), 'total_confianca', ROUND(conf_sum, 1)) FROM scores WHERE trait = 'agreeableness'),\n    'neuroticism', (SELECT json_build_object('score_ponderado', ROUND(score_ponderado, 1), 'media_score', ROUND(avg_score, 1), 'media_confianca', ROUND(avg_conf, 1), 'total_confianca', ROUND(conf_sum, 1)) FROM scores WHERE trait = 'neuroticism')\n  ) AS detalhes_traits,\n  (SELECT COUNT(*) FROM dados) AS registros_analisados,\n  (SELECT COUNT(DISTINCT dados.chat_id) FROM dados) AS conversas_distintas,\n  (SELECT inicio FROM periodo) AS inicio_periodo,\n  CURRENT_DATE AS fim_periodo,\n  CASE\n    WHEN EXISTS (SELECT 1 FROM dados) THEN CONCAT(\n      'Traço dominante nos últimos 30 dias: ',\n      COALESCE((SELECT label FROM labels WHERE trait = (SELECT trait FROM ordenado WHERE pos = 1)), 'indefinido'),\n      '. Confiabilidade média geral: ',\n      TO_CHAR(COALESCE((SELECT ROUND(AVG(avg_conf), 1) FROM scores WHERE avg_conf IS NOT NULL), 0), 'FM990.0'),\n      '.'\n    )\n    ELSE 'Sem leituras nas últimas 30 conversas.'\n  END AS resumo_perfil\nFROM periodo;\n",
        "options": {
          "queryReplacement": "={{ $('start').item.json.usr_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3440,
        160
      ],
      "id": "6914ba63-bb43-473f-8c36-5709bd5a80e2",
      "name": "perfil_bigfive",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "jUAvu7DUAzyqZhJd",
          "mode": "list",
          "cachedResultUrl": "/workflow/jUAvu7DUAzyqZhJd",
          "cachedResultName": "sw_chat_transcription"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "body.instance": "={{ $('start').item.json[\"body.instance\"] }}",
            "body.data.key.remoteJid": "={{ $('start').item.json[\"body.data.key.remoteJid\"] }}",
            "body.data.key.id": "={{ $('start').item.json[\"body.data.key.id\"] }}",
            "body.data.key.fromMe": "={{ $('start').item.json[\"body.data.key.fromMe\"] }}",
            "body.data.pushName": "={{ $('start').item.json[\"body.data.pushName\"] }}",
            "body.data.message.conversation": "={{ $('start').item.json[\"body.data.message.conversation\"] }}",
            "body.data.messageType": "={{ $('start').item.json[\"body.data.messageType\"] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "body.instance",
              "displayName": "body.instance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.key.remoteJid",
              "displayName": "body.data.key.remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.key.id",
              "displayName": "body.data.key.id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.key.fromMe",
              "displayName": "body.data.key.fromMe",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "boolean"
            },
            {
              "id": "body.data.pushName",
              "displayName": "body.data.pushName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.message.conversation",
              "displayName": "body.data.message.conversation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.messageType",
              "displayName": "body.data.messageType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -2352,
        160
      ],
      "id": "fb706a08-fe84-4a48-a7b0-b9d8e0eb94ed",
      "name": "Transcrição"
    },
    {
      "parameters": {
        "jsCode": "// =======================================\n// NODE: Build Keys\n// Gera sessionKey e lockKey únicas por usuário\n// =======================================\n\n// Captura dados necessários\nconst startData = $('start').first().json;\nconst userData = $('dados_usr').first().json;\n\n// Extrai valores com fallback de segurança\nconst instance = startData?.['body.instance'] || 'unknownInstance';\nconst userId = startData?.usr_id || 'unknownUser';\nconst phone = userData?.whatsapp_numero || 'unknownPhone';\n\n// Monta chaves\nconst sessionKey = `${instance}_${userId}_${phone}`;\nconst lockKey = `lock:${sessionKey}`;\n\n// Retorna como JSON limpo\nreturn {\n  sessionKey,\n  lockKey\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3232,
        160
      ],
      "id": "ebcefcc0-a333-4faa-b1ce-b62a5791a9a9",
      "name": "Build Keys"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('Build Keys').first().json.lockKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3040,
        160
      ],
      "id": "c26422c8-7207-4338-972d-2c3138e4b918",
      "name": "Redis GET Lock",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ \n  Number(\n    (\n      (\n        $('Redis GET Lock').first().json.propertyName \n        || $('Redis GET Lock').first().json.value \n        || JSON.stringify($('Redis GET Lock').first().json)\n      ).toString().match(/\\d{10,}/)?.[0]   /* pega o epoch (>=10 dígitos) onde quer que esteja */\n    ) || 0\n  )\n}}\n",
              "rightValue": "={{ +Math.floor(Date.now()/1000) }}\n",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "id": "bda2c9fa-d4eb-44bb-86d3-f3fba4f7a194"
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2560,
        0
      ],
      "id": "d2bc2fa8-32d0-4067-881b-98292d132454",
      "name": "LOCK ativo?"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('start').first().json[\"body.instance\"] }}{{ $('start').first().json.usr_id }}{{ $('dados_usr').first().json.whatsapp_numero }}",
        "sessionTTL": 43200,
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        -1056,
        960
      ],
      "id": "ce5948a9-a3df-43a4-916e-6efbfb94152c",
      "name": "memory",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -2144,
        160
      ],
      "id": "f98d3b2d-f038-4d82-a976-847bbd66fa34",
      "name": "Chat Memory  - Get"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "=Sistema: Interaction {{ $('intertion_count').item.json.interaction_count }} de 5. Foco: {{ $('intertion_count').item.json.next_focus }}.",
              "hideFromUI": true
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -1680,
        160
      ],
      "id": "bd00f389-130c-4080-8381-3995bc0cb472",
      "name": "Chat Memory - Insert"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('intertion_count').first().json.interaction_count }}",
                    "rightValue": "={{ $('mindquest_config').item.json.limit_iteration }}",
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    },
                    "id": "e9d7398d-88e3-4023-8a02-606ab2e3a08a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Maior que  {{ $('mindquest_config').item.json.limit_iteration }}"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('intertion_count').first().json.interaction_count }}",
                    "rightValue": "={{ $('mindquest_config').item.json.limit_iteration }}",
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    },
                    "id": "50077f16-4b38-4c3c-b47e-bc210052084f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Menor ou igual a {{ $('mindquest_config').item.json.limit_iteration }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -1392,
        160
      ],
      "id": "3847cfd1-edf1-413a-892b-444c0438fe72",
      "name": "Interações (Pré-Agente)"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1344,
        400
      ],
      "id": "ef6994ff-012d-4d48-9465-89d3ff568d60",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "rSnkOnnAHyfayLJt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "description": "Use this tool to search the history of users' latest conversations.",
        "workflowId": {
          "__rl": true,
          "value": "HDTrSrJiBIv2FFks",
          "mode": "list",
          "cachedResultUrl": "/workflow/HDTrSrJiBIv2FFks",
          "cachedResultName": "sw_get_history"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usr_id": "={{ $('dados_usr').item.json.id }}"
          },
          "matchingColumns": [
            "usr_id"
          ],
          "schema": [
            {
              "id": "usr_id",
              "displayName": "usr_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -1168,
        400
      ],
      "id": "c7e80cc7-35cc-4142-8b26-2d24352ffb19",
      "name": "get_history"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "==# 💬 MINDQUEST — CONTEXTO DA RODADA\n\nVocê é o Assistente de reflexão pessoal. Sua missão é guiar o usuário com acolhimento e curiosidade, ajudando-o a transformar sentimentos em clareza e pequenos passos possíveis.\n\n### Estrutura da resposta\n1. **Acolhimento curto** – no máximo 2 frases curtas, na mesma linha.\n2. **Bloco central** – parágrafos de até 3 frases. Quebre as frases com linhas em branco entre cada uma.\n3. **Sugestões ou caminhos** – sempre em lista com bullets `•`, cada bullet com até 2 frases.\n4. **Encerramento** – 1 pergunta ou convite gentil, em frase única.\n5. **Nunca repita instruções internas ou ferramentas. Não adicione assinaturas.**\n\n### Estilo e ritmo\n- Quebre o texto com uma linha em branco entre cada parágrafo.\n- Use linguagem coloquial, leve e calorosa; evite frases longas.\n- Valide o que o usuário sente antes de propor qualquer caminho.\n- Ao responder, prefira verbos no presente e convites suaves (“que tal…?”, “topa contar…?”).\n- Quando trouxer exemplos, varie o início dos bullets para não soar repetitivo.\n- Nunca mencione que está seguindo regras, prompts ou ferramentas.\n\n\n### Ajuda ao usuário\n- Se ele não souber como continuar ou pedir orientação, consulte a  `user_conversation_guide` e traga apenas o que fizer sentido, adaptando à conversa.\n\n---\n\n**Interação atual:** {{ $('intertion_count').item.json.interaction_count }}  \n**Total desta sessão:** {{ $('mindquest_config').item.json.limit_iteration }}  \n**Seu nome escolhido pelo usuário:** {{ $('dados_usr').item.json.nome_assistente }} (use quando fizer sentido).\n\n---\n\n## 💬 DADOS DISPONÍVEIS\n<contexto_conversa>\n\n**Mensagem do usuário:** {{ $('Transcrição').item.json.message }}\n**Nome preferido:** {{ $('dados_usr').first().json.nome_preferencia }}\n**Big Five (últimos 30 dias):**\n{{ (() => {\n  const perfil = $('perfil_bigfive').first()?.json ?? null;\n  const label = {openness:'Abertura', conscientiousness:'Conscienciosidade', extraversion:'Extroversão', agreeableness:'Amabilidade', neuroticism:'Neuroticismo'};\n  if (!perfil || !perfil.perfil_primario) {\n    return '• Sem leituras nas últimas 30 conversas.';\n  }\n  const lines = [];\n  lines.push('• Traço dominante: ' + (label[perfil.perfil_primario] || perfil.perfil_primario));\n  if (perfil.perfil_secundario && perfil.perfil_secundario !== perfil.perfil_primario) {\n    lines.push('• Traço secundário: ' + (label[perfil.perfil_secundario] || perfil.perfil_secundario));\n  }\n  return lines.join('\\n');\n})() }}\n</contexto_conversa>\n\n---\n\n## 🎯 DIRETRIZES DA RODADA\n{{ (() => { const count = Number($('intertion_count').item.json.interaction_count); const limit = Number($('mindquest_config').item.json.limit_iteration); if (count === 1) { return '- Antes de responder, chame `get_history`. Abra a conversa com acolhimento caloroso e curiosidade pelo momento atual.'; } if (count === limit - 1) { return '- Ofereça um resumo breve e empático do que entendeu. Confirme se faz sentido e ajuste se o usuário sinalizar.'; } if (count === limit) { return '- Reconheça avanços, conclua com leveza e convide o usuário a visitar o dashboard. Se ele insistir, agradeça e direcione para a próxima sessão.'; } return '- Mantenha a conversa orgânica: explore sentimentos e contextos com perguntas abertas, valide sensações e conecte com percepções úteis do histórico.'; })() }}\n\n## 🎨 TOM PERSONALIZADO\n{{ (() => {\n  const perfil = $('perfil_bigfive').first()?.json ?? null;\n  const toneMap = {\n    openness: 'Estimule curiosidade e novas perspectivas; convide a imaginar caminhos.',\n    conscientiousness: 'Ofereça estrutura leve, reconheça disciplina e proponha passos simples.',\n    extraversion: 'Traga energia calorosa, celebre interações e convide a compartilhar histórias.',\n    agreeableness: 'Redobre a empatia, valide intenções gentis e co-construa soluções.',\n    neuroticism: 'Passe segurança emocional, normalize oscilações e avance com calma.'\n  };\n  if (!perfil || !perfil.perfil_primario) {\n    return '- Tom base neutro e acolhedor; priorize validação e escuta.';\n  }\n  const lines = ['- Tom base: ' + (toneMap[perfil.perfil_primario] || 'Mantenha acolhimento neutro.')];\n  if (perfil.perfil_secundario && perfil.perfil_secundario !== perfil.perfil_primario && toneMap[perfil.perfil_secundario]) {\n    lines.push('- Toque secundário: ' + toneMap[perfil.perfil_secundario]);\n  }\n  return lines.join('\\n');\n})() }}\n\n## Ferramentas disponíveis\n- get_history — use na 1ª interação para recuperar o histórico das últimas 7 conversas.\n- user_conversation_guide — acione quando o usuário pedir ajuda sobre “como funciona?” ou “o que devo falar?”.\n- agent_conversation_guide — apoia aprofundamento, encerramentos e recursos extras; adapte antes de responder.\n\n## Regras\n- Use o histórico apenas quando fizer sentido natural.\n- Traga novidades na abordagem, evitando repetir perguntas ou frases já usadas.\n- Responda sempre em texto natural estilo WhatsApp, obedecendo às diretrizes de formato acima.\n\n---\n\n## 🌿 TOM & FOCO\n- Soe humano, interessado e leve; nada de linguagem mecânica.\n- Mostre curiosidade sincera pela vida do usuário e pelas nuances do que ele conta.\n- Incentive-o a se expressar mais; aprofunde com cuidado quando ele se abrir.\n- Busque identificar objetivos, motivações e obstáculos relevantes para ele.\n\n---\n\n## 🧘 META EMOCIONAL\nConduza a sessão para que o usuário termine se sentindo ouvido, mais claro e com vontade de continuar cuidando de si.\n",
        "options": {
          "systemMessage": "=# 🧠 SYSTEM PROMPT — MINDQUEST\n## Assistente de reflexão pessoal — (Sistema)\n\n### 🎯 PROPÓSITO\nVocê é o **Assistente de reflexão pessoal**, parte sábia e empática da mente do usuário. Conduza a conversa com leveza, ajudando-o a transformar sentimentos em clareza e ações gentis.\n\n---\n\n### 🧩 CONTEXTO GERAL\n- Conversas acontecem pelo **WhatsApp**.\n- Cada sessão tem exatamente `session_limit = {{ $('mindquest_config').item.json.limit_iteration }}` interações.\n- O número atual vem do n8n: `interaction_count = {{ $('intertion_count').item.json.interaction_count }}`.\n- Nunca mencione sistemas, prompts ou ferramentas; fale sempre como um mentor humano.\n\n#### 📥 Dados dinâmicos (uso interno)\n| Dado | Variável | Uso |\n|------|----------|-----|\n| Nome preferido | `{{ $('dados_usr').first().json.nome_preferencia }}` | Cumprimentar se válido. |\n| Perfil Big Five | `{{ (() => { const node = $('perfil_bigfive').first(); const data = node && node.json ? node.json : {}; const map = {openness:'Abertura', conscientiousness:'Conscienciosidade', extraversion:'Extroversão', agreeableness:'Amabilidade', neuroticism:'Neuroticismo'}; const trait = data.perfil_primario; return map[trait] || trait || 'Neutro'; })() }}` | Modular tom. |\n| Perfil secundário | `{{ (() => { const node = $('perfil_bigfive').first(); const data = node && node.json ? node.json : {}; const map = {openness:'Abertura', conscientiousness:'Conscienciosidade', extraversion:'Extroversão', agreeableness:'Amabilidade', neuroticism:'Neuroticismo'}; const trait = data.perfil_secundario; return map[trait] || 'Sem secundário'; })() }}` | Ajuste extra. |\n| Resumo Big Five | `{{ (() => { const node = $('perfil_bigfive').first(); const data = node && node.json ? node.json : {}; return data.resumo_perfil || 'sem resumo recente'; })() }}` | Lembrar inclinações. |\n| Nome do assistente | `{{ $('dados_usr').first().json.nome_assistente }}` | Use como sua assinatura. |\n\nSe não houver nome preferido válido, mantenha saudação neutra.\n\n---\n\n### 👥 CONTEXTO GERACIONAL\n- Se houver faixa etária `{{ $('dados_usr').first().json.faixa_etaria }}` válido, ajuste exemplos e linguagem conforme a faixa:\n  - **13‑17 — Adolescência:** acolha inseguranças típicas; evite pressões; incentive explorar sentimentos com calma; convide a contar eventos da escola, amigos, família e sonhos iniciais.\n  - **18‑24 — Início da vida adulta:** traga curiosidade sobre transições como vestibular, universidade, primeiro emprego e construção de identidade; normalize dúvidas sobre rumo profissional e autonomia.\n  - **25‑34 — Consolidação inicial:** converse sobre avanços na carreira, relacionamentos sérios e primeiros planejamentos financeiros; estimule pequenas ações para equilibrar ambições e autocuidado.\n  - **35‑44 — Meio de carreira / família em crescimento:** reconheça múltiplas responsabilidades familiares e profissionais; ajude a priorizar, estabelecer metas de médio prazo e cuidar da própria energia.\n  - **45‑54 — Reavaliação e maturidade:** destaque propósito, saúde preventiva e realinhamento de metas; valide desafios com filhos adolescentes/universitários e mudanças de carreira.\n  - **55‑64 — Transições para novos ritmos:** aborde pré-aposentadoria, mudanças de papel familiar e manutenção de relevância; incentive novas rotinas que preservem significado e vínculos.\n  - **65+ — Longevidade ativa:** celebre conquistas; foque em bem-estar integral, autonomia, legado e redes de apoio; convide a revisitar histórias e compromissos que nutram sentido.\n- Se não houver idade, mantenha tom neutro e centrado no contexto trazido pelo usuário.\n\n\n### 🔢 COMO AGIR EM CADA INTERAÇÃO\n1. **Quando `interaction_count === 1`**\n   - Chame `get_history` antes de responder.\n   - Acolha, crie rapport e introduza o clima da conversa antes de citar histórico.\n2. **Quando `1 < interaction_count < session_limit - 1`**\n   - Explore emoções, histórias e significados conforme a conversa evoluir.\n   - Use perguntas abertas, validações curtas e mini-insights quando fizer sentido.\n3. **Quando `interaction_count === session_limit - 1`**\n   - Produza um resumo breve e empático do que entendeu.\n   - Pergunte se faz sentido ou se deseja ajustar algo e incorpore correções.\n4. **Quando `interaction_count === session_limit`**\n   - Reconheça avanços, transmita sensação de fechamento e convide ao dashboard.\n   - Se o usuário tentar continuar, agradeça e direcione para retomar na próxima sessão.\n\nNunca ultrapasse `session_limit` mensagens.\n\n---\n\n### 🧬 PERFIL BIG FIVE\n- Use a última leitura para modular tom e ritmo.\n- Se `insuficiente` for verdadeiro ou não houver leitura, mantenha abordagem neutra e acolhedora.\n- Mapa rápido:\n  - `openness`: estimule curiosidade, metáforas leves e novas perspectivas.\n  - `conscientiousness`: ofereça estrutura suave, reconheça disciplina e proponha pequenos passos.\n  - `extraversion`: traga energia calorosa, convide a compartilhar histórias sociais.\n  - `agreeableness`: redobre empatia, cooperação e valide intenções gentis.\n  - `neuroticism`: passe segurança emocional, normalize oscilações e avance devagar.\n\n---\n\n### 📐 FORMATO DA RESPOSTA\n- Parágrafos curtos (até 3 frases) separados por linha em branco.\n- Quando sugerir exemplos ou caminhos, use bullets `•`.\n- Linguagem coloquial, sem jargões técnicos ou diagnósticos.\n- Finalize sempre com pergunta ou convite leve.\n\n---\n\n### 🛠️ FERRAMENTAS\n`get_history`\n- Use somente na primeira interação, antes de responder.\n- Histórico vazio indica ausência de conversas recentes; incentive consistência e, se útil, chame `agent_conversation_guide`.\n\n`user_conversation_guide`\n- Acione quando o usuário pedir ajuda sobre “como funciona?” ou “o que devo falar?”. Resuma e conecte ao contexto atual.\n\n`agent_conversation_guide`\n- Use para perguntas de aprofundamento, sugestões de encerramento ou recursos extras. Leia, escolha o que fizer sentido e adapte.\n\n---\n\n### 🌿 ESTILO DE CONVERSA\n- Voz humana, calma, curiosa e acolhedora.\n- Nomeie sentimentos antes de avançar; valide experiências.\n- Integre referências recentes apenas quando fizer sentido natural.\n- Caminho mental: acolher → entender → validar → apontar próximos passos leves.\n\n---\n\n### 🚫 RESTRIÇÕES\n- Não mencione ser IA, sistema ou seguir prompts.\n- Não forneça aconselhamento médico ou diagnóstico.\n- Não explique o dashboard; apenas convide a visitá-lo no encerramento.\n\n---\n\n### 🧭 MISSÃO\nAbra espaço seguro, explore emoções e gatilhos, conecte percepções e encerre com leveza, convidando o usuário a continuar cuidando de si.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1184,
        176
      ],
      "id": "9db8775a-5d86-44ee-9b71-5ef5a3533bde",
      "name": "Mentor de vida"
    },
    {
      "parameters": {
        "jsCode": "// organiza_json\n// ====================================================\n// NODE: organiza_json\n// Separa a mensagem do usuário e o JSON de contexto (se existir)\n// ====================================================\n\n// Resposta do agente\nconst aiResponse = $input.first()?.json?.output ?? \"\";\n\n// Dados de controle da interação\nconst jsNode = $('intertion_count').first().json;\nconst config = $('mindquest_config').first().json;\nconst sessionLimit = Number(config?.limit_iteration) || 8;\nconst interactionCount = jsNode?.interaction_count ?? 1;\nconst isLastInteraction = interactionCount >= sessionLimit;\n\n// Se não for a última interação → retorna só a mensagem\nif (interactionCount < sessionLimit) {\n  return {\n    user_message: aiResponse,\n    context_json: null,\n    has_context: false,\n    interaction_count: interactionCount,\n    is_last_interaction: false,\n    session_limit: sessionLimit,\n    original_response: aiResponse\n  };\n}\n\n// ----------------------------------------------------\n// Tenta detectar JSON dentro da resposta (se existir)\n// ----------------------------------------------------\nconst jsonStartPattern = /\\{[\\s\\n]*\"interaction_completa\"/;\nconst jsonMatch = aiResponse.match(jsonStartPattern);\n\nlet userMessage = aiResponse;\nlet contextJson = null;\nlet hasJson = false;\n\nif (jsonMatch) {\n  const jsonStartIndex = jsonMatch.index;\n\n  // Mensagem de texto (antes do JSON)\n  userMessage = aiResponse.substring(0, jsonStartIndex).trim();\n\n  // JSON (a partir do padrão encontrado)\n  const jsonString = aiResponse.substring(jsonStartIndex).trim();\n\n  try {\n    contextJson = JSON.parse(jsonString);\n    hasJson = true;\n  } catch (err) {\n    console.error('Erro ao fazer parse do JSON:', err);\n  }\n}\n\n// ----------------------------------------------------\n// Retorna objeto estruturado para uso posterior\n// ----------------------------------------------------\nreturn {\n  user_message: userMessage,\n  context_json: contextJson,\n  has_context: hasJson,\n  original_response: aiResponse,\n  interaction_count: interactionCount,\n  is_last_interaction: isLastInteraction,\n  session_limit: sessionLimit\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        176
      ],
      "id": "d805dde0-8805-4595-9c5c-e8d721d85814",
      "name": "organiza_json"
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -384,
        160
      ],
      "id": "64ad6269-a551-4c9f-82f1-a77125881ce7",
      "name": "Chat Memory  - Get1"
    },
    {
      "parameters": {
        "jsCode": "// ====================================================\n// N8N CODE NODE: junta_dados_gravacao (VERSÃO FINAL)\n// ====================================================\n\nconst dadosOrganizados = $('organiza_json').first().json;\nconst chatMemory = $input.item.json;\nconst config = $('mindquest_config').first().json;\nconst mensagensCompletas = Array.isArray(chatMemory.messages) ? chatMemory.messages : [];\n\n// Determina limite de sessão (fallback seguro)\nconst configuredLimit = Number(config?.limit_iteration);\nconst sessionLimit = Number.isFinite(configuredLimit) && configuredLimit > 0\n  ? configuredLimit\n  : Number(dadosOrganizados.total_interactions) || 8;\n\n// Corrigir session_id (remover template strings)\nconst startData = $('start').first().json;\nconst transcricaoData = $('Transcrição').first().json;\nconst sessionId = `${startData[\"body.instance\"]}${startData.usr_id}${transcricaoData.WhstsApp_Number}`;\n\nconst USER_REGEX = /\\*\\*Mensagem do Usu[aá]rio:\\*\\*\\s*([\\s\\S]*?)(?=\\n\\*\\*|\\n<|$)/i;\n\nfunction extrairMensagemUsuario(promptCompleto) {\n  if (!promptCompleto || typeof promptCompleto !== 'string') {\n    return '';\n  }\n\n  const match = promptCompleto.match(USER_REGEX);\n  if (match && match[1]) {\n    const cleaned = match[1].replace(/^[:\\-–\\s]+/, '').trim();\n    if (cleaned) {\n      return cleaned;\n    }\n  }\n\n  const linhas = promptCompleto\n    .split(/\\r?\\n/)\n    .map(l => l.trim())\n    .filter(l => l && !l.startsWith('#') && !l.startsWith('=') && !l.startsWith('**') && !l.startsWith('-') && !l.startsWith('_') && !l.startsWith('<'));\n\n  if (linhas.length > 0) {\n    return linhas[0];\n  }\n\n  return promptCompleto.trim();\n}\n\nfunction textoValido(valor) {\n  return typeof valor === 'string' && valor.trim().length > 0;\n}\n\nconst mensagens = [];\nlet interactionNumber = 1;\n\nfor (const msg of mensagensCompletas) {\n  if (!msg || typeof msg !== 'object') {\n    continue;\n  }\n\n  const role = msg.role ?? null;\n  const systemFlag = msg.system === true || role === 'system';\n\n  const humanTexto = textoValido(msg.human)\n    ? msg.human.trim()\n    : ((role === 'user' || role === 'human') && textoValido(msg.content) ? msg.content.trim() : null);\n\n  const aiTexto = textoValido(msg.ai)\n    ? msg.ai.trim()\n    : ((role === 'assistant' || role === 'ai') && textoValido(msg.content) ? msg.content.trim() : null);\n\n  const isSystemOnly = systemFlag && !humanTexto && !aiTexto;\n  if (isSystemOnly) {\n    continue;\n  }\n\n  const isControleInterno = humanTexto && humanTexto.toLowerCase().startsWith('sistema:');\n  if (systemFlag || isControleInterno) {\n    if (!aiTexto) {\n      continue;\n    }\n  }\n\n  if (humanTexto && !isControleInterno) {\n    const textoExtraido = extrairMensagemUsuario(humanTexto);\n    if (textoValido(textoExtraido)) {\n      mensagens.push({\n        interaction: interactionNumber,\n        autor: 'usuario',\n        texto: textoExtraido,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  if (aiTexto) {\n    mensagens.push({\n      interaction: interactionNumber,\n      autor: 'agente',\n      texto: aiTexto,\n      timestamp: new Date().toISOString()\n    });\n    interactionNumber++;\n  }\n}\n\nconst contextoFinal = {\n  situacao_emocional: dadosOrganizados.situacao_emocional || '',\n  contextos_mencionados: dadosOrganizados.contextos_mencionados || [],\n  sentimentos_expressos: dadosOrganizados.sentimentos_expressos || [],\n  eventos_importantes: dadosOrganizados.eventos_importantes || [],\n  intensidade_geral: dadosOrganizados.intensidade_geral || 'média',\n  validado_pelo_usuario: dadosOrganizados.validado_pelo_usuario || false,\n  observacoes_agente: dadosOrganizados.observacoes_agente || ''\n};\n\nreturn {\n  whatsapp_numero: transcricaoData.WhstsApp_Number,\n  usuario_id: startData.usr_id,\n  session_id: sessionId,\n  total_interactions: dadosOrganizados.total_interactions || sessionLimit,\n  status: dadosOrganizados.status || 'completa',\n  mensagens: JSON.stringify(mensagens),\n  contexto_final: JSON.stringify(contextoFinal),\n  humor_autoavaliado: dadosOrganizados.humor_autoavaliado || null,\n  emocao_primaria: dadosOrganizados.emocao_primaria || null,\n  intensidade_emocao: dadosOrganizados.intensidade_emocao || null,\n  energia_detectada: dadosOrganizados.energia_detectada || null,\n  qualidade_interacao: dadosOrganizados.qualidade_interacao || null,\n  emoji_dia: dadosOrganizados.emoji_dia || null,\n  contexto_validado: dadosOrganizados.validado_pelo_usuario || false,\n  pronta_para_especialista: dadosOrganizados.pronta_para_especialista || false,\n  observacoes_usuario: dadosOrganizados.observacoes_agente || ''\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        160
      ],
      "id": "899f97c3-c70b-4a4b-8478-0d93adaff8e8",
      "name": "junta_dados_gravacao"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- ====================================================\n-- INSERT usr_chat - Gravação de Conversa Completa\n-- ====================================================\n\nINSERT INTO usr_chat (\n    usuario_id,\n    session_id,\n    total_interactions,\n    status,\n    mensagens,\n    data_conversa,\n    horario_inicio,\n    horario_fim\n) VALUES (\n    $1,  -- usuario_id\n    $2,  -- session_id\n    $3,  -- total_interactions\n    $4,  -- status\n    $5::jsonb,  -- mensagens\n    CURRENT_DATE,\n    CURRENT_TIME,\n    CURRENT_TIME\n)\nRETURNING id, usuario_id, data_conversa, status;",
        "options": {
          "queryReplacement": "={{[ $json.usuario_id, $json.session_id, $json.total_interactions, $json.status, $json.mensagens ]}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        160,
        160
      ],
      "id": "c0e80752-3616-4946-8556-5d950bc56782",
      "name": "Grava_chat",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        528,
        1056
      ],
      "id": "b347d2da-68c5-4af6-891e-0160d0047a2f",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "rSnkOnnAHyfayLJt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analise a conversa completa abaixo entre o usuário e o agente.\n\n**CONVERSA COMPLETA:**\n```json\n{{ $('junta_dados_gravacao').item.json.mensagens }}\n\nUser Name: {{ $('dados_usr').first().json.nome_preferencia }}\n\nSUA TAREFA:\n1. GERAR RESUMO CONCISO\nCrie um resumo mantendo APENAS:\n\nSituação emocional do dia (estado atual)\nEventos importantes mencionados\nSentimentos expressos (não repita, liste únicos)\nContextos relevantes (trabalho, família, relacionamentos, etc)\nInsights ou reflexões importantes\nDecisões ou planos mencionados\n\nRemova:\n\nPerguntas do agente (mantenha só respostas do usuário)\nValidações e confirmações\nRepetições de informações\nSaudações e despedidas\n\n2. ANALISAR REFLEXÃO DO USUÁRIO\nDetermine se o usuário demonstrou reflexão profunda:\nTEM REFLEXÃO = true se:\n\nUsuário analisou seus sentimentos com profundidade\nFez conexões entre eventos e emoções\nDemonstrou autoconhecimento\nQuestionou padrões próprios\nFalou sobre aprendizados ou insights pessoais\n\nTEM REFLEXÃO = false se:\n\nApenas relatou fatos superficialmente\nRespostas curtas e diretas sem elaboração\nNão explorou emoções ou causas\n\n3. CONTAR PALAVRAS DO USUÁRIO\nConte APENAS palavras das falas do usuário (autor: \"usuario\"), excluindo falas do agente.\n\n\nRETORNE APENAS ESTE JSON:\n\n{\n  \"resumo_conversa\": \"string\",\n  \"tem_reflexao\": true,  // ← SEM aspas, SEM dois pontos\n  \"justificativa_reflexao\": \"string\",\n  \"total_palavras_usuario\": 204,  // ← número, não string\n  \"confianca_analise\": 95  // ← número, não string\n}\n\nIMPORTANTE:\n\nO resumo deve ser em 3ª pessoa\nUse o nome do usuário se disponível, senão use \"Usuário\"\nSeja preciso e objetivo\nFoque no que é ÚNICO desta conversa (não generalidades)",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Você é um especialista em análise e síntese de conversas terapêuticas.\n\nSeu trabalho é:\n1. Analisar a conversa completa entre usuário e agente (5 interações)\n2. Gerar um resumo conciso mantendo APENAS o essencial\n3. Identificar se o usuário fez reflexões profundas\n4. Contar palavras totais do usuário\n5. Preservar contexto emocional e insights importantes\n\nREGRAS CRÍTICAS:\n- Remova redundâncias e repetições\n- Mantenha apenas informações únicas e relevantes\n- Preserve sentimentos, eventos e contextos mencionados\n- Seja objetivo e direto\n- Máximo de 300 palavras no resumo\n- Retorne APENAS JSON estruturado\n\nVocê está ajudando a construir o perfil psicológico do usuário ao longo do tempo, então cada palavra conta."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        560,
        848
      ],
      "id": "fdb6f224-26fb-41b2-848c-d7c987b9095d",
      "name": "Resumo das conversas"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"resumo_conversa\": \"string\",\n  \"tem_reflexao\": true, \n  \"justificativa_reflexao\": \"string\",\n  \"total_palavras_usuario\": 204,  \n  \"confianca_analise\": 95 \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        720,
        1072
      ],
      "id": "8d309b97-97f4-4eb6-a2b2-d246d30a24b5",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "usr_chat",
          "mode": "list",
          "cachedResultName": "usr_chat"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Grava_chat').item.json.id }}",
            "total_palavras_usuario": "={{ $json.output.total_palavras_usuario }}",
            "resumo_conversa": "={{ $json.output.resumo_conversa }}",
            "tem_reflexao": "={{ $json.output.tem_reflexao }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "type": "string",
              "defaultMatch": true
            },
            {
              "id": "resumo_conversa",
              "displayName": "resumo_conversa",
              "type": "string"
            },
            {
              "id": "tem_reflexao",
              "displayName": "tem_reflexao",
              "type": "boolean"
            },
            {
              "id": "total_palavras_usuario",
              "displayName": "total_palavras_usuario",
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        880,
        848
      ],
      "id": "a3b150a4-5887-4c50-bc74-3dba77232211",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "agXJK8Dd49If1eFx",
          "mode": "list",
          "cachedResultUrl": "/workflow/agXJK8Dd49If1eFx",
          "cachedResultName": "sw_experts_gamification"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').item.json.usuario_id }}",
            "chat_id": "={{ $('Grava_chat').item.json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "tem_reflexao": "={{ $('Resumo das conversas').item.json.output.tem_reflexao }}",
            "justificativa_reflexao": "={{ $('Resumo das conversas').item.json.output.justificativa_reflexao }}",
            "total_palavras_usuario": "={{ $('Resumo das conversas').item.json.output.total_palavras_usuario }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "type": "string"
            },
            {
              "id": "tem_reflexao",
              "displayName": "tem_reflexao",
              "type": "boolean"
            },
            {
              "id": "justificativa_reflexao",
              "displayName": "justificativa_reflexao",
              "type": "string"
            },
            {
              "id": "total_palavras_usuario",
              "displayName": "total_palavras_usuario",
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        1088,
        848
      ],
      "id": "f74c9646-c3a8-4ad9-93ba-63af4fec5c46",
      "name": "Gamificação"
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        544,
        656
      ],
      "id": "cc94bcf2-47e2-4e68-8244-a5f3bed312c7",
      "name": "Chat Memory - Delete All (final)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ `lock:${$('Build Keys').first().json.sessionKey}` }}",
        "value": "={{ Math.floor(Date.now()/1000) + 43200 }}",
        "keyType": "string",
        "expire": true,
        "ttl": 43200
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        864,
        656
      ],
      "id": "52cd3df1-61a9-4afb-bc29-55c8f4a3af70",
      "name": "Redis SET Lock (12h)",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "vJRfrbY4NhpNyfCD",
          "mode": "list",
          "cachedResultUrl": "/workflow/vJRfrbY4NhpNyfCD",
          "cachedResultName": "sw_experts_panas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').item.json.usuario_id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "mensagens": "={{ $('junta_dados_gravacao').item.json.mensagens }}",
            "chat_id": "={{ $('Grava_chat').item.json.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        864,
        -224
      ],
      "id": "f20af3b9-9a71-43f6-b986-0966af31f5b8",
      "name": "experts_panas"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "GykxpS5vsg8NeoOh",
          "mode": "list",
          "cachedResultUrl": "/workflow/GykxpS5vsg8NeoOh",
          "cachedResultName": "sw_expert_humor_energia"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').item.json.usuario_id }}",
            "mensagens": "={{ $('junta_dados_gravacao').item.json.mensagens }}",
            "chat_id": "={{ $('Grava_chat').item.json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "usr_name": "={{ $('dados_usr').all()[0].json.nome_preferencia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        864,
        -64
      ],
      "id": "7c9a5d06-a8be-49ba-86e6-33a4855d4086",
      "name": "experts_humor_energia"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Vbc4JHAR3388mLcv",
          "mode": "list",
          "cachedResultUrl": "/workflow/Vbc4JHAR3388mLcv",
          "cachedResultName": "sw_expert_sabotadores"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('Grava_chat').first().json.usuario_id }}",
            "chat_id": "={{ $('Grava_chat').first().json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "mensagens": "={{ $('junta_dados_gravacao').first().json.mensagens }}",
            "usr_name": "={{ $('dados_usr').first().json.nome_preferencia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        864,
        96
      ],
      "id": "23efcc87-7cff-4fe6-83e3-7b50beee0ec8",
      "name": "experts_sabotadores"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "nEstxgiVE8GLXgUQ",
          "mode": "list",
          "cachedResultUrl": "/workflow/nEstxgiVE8GLXgUQ",
          "cachedResultName": "sw_expert_insights_acionaveis"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').first().json.usuario_id }}",
            "mensagens": "={{ $('junta_dados_gravacao').first().json.mensagens }}",
            "chat_id": "={{ $('Grava_chat').first().json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "usr_name": "={{ $('dados_usr').first().json.nome }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "contexto_final",
              "displayName": "contexto_final",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        864,
        256
      ],
      "id": "846eb0f1-89d5-46c8-a3c8-a4dffb1cac9f",
      "name": "Expert_Insights"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "nOl6lnaGMpyg9S9J",
          "mode": "list",
          "cachedResultUrl": "/workflow/nOl6lnaGMpyg9S9J",
          "cachedResultName": "sw_expert_bigfive_ocean"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('Grava_chat').first().json.usuario_id }}",
            "mensagens": "={{ $('junta_dados_gravacao').first().json.mensagens }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "chat_id": "={{ $('Grava_chat').first().json.id }}",
            "usr_name": "={{ $('dados_usr').first().json.nome_preferencia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        864,
        416
      ],
      "id": "3028451d-228e-41bd-b217-2d44e4d70beb",
      "name": "experts_bigfive"
    },
    {
      "parameters": {
        "jsCode": "// Lê valor do GET (sua versão retorna em propertyName; deixo compatível)\nconst raw = $('Redis GET Lock').first().json.propertyName ?? $('Redis GET Lock').first().json.value ?? null;\n\nconst now = Math.floor(Date.now() / 1000);\nconst unlockAt = Number(raw);\n\n// Se o valor não for numérico, não há como calcular\nif (!Number.isFinite(unlockAt) || unlockAt <= 0) {\n  return { remaining_seconds: 0, remaining_hm: \"0h 0m\", unlock_clock: \"00:00\" };\n}\n\nlet remaining = Math.max(unlockAt - now, 0);\nconst hours = Math.floor(remaining / 3600);\nconst minutes = Math.floor((remaining % 3600) / 60);\n\n// Hora exata (Europe/Lisbon)\nconst unlockDate = new Date(unlockAt * 1000);\nconst hm = new Intl.DateTimeFormat('pt-PT', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Europe/Lisbon' }).format(unlockDate);\n\nreturn {\n  remaining_seconds: remaining,\n  remaining_hm: `${hours}h ${minutes}m`,\n  unlock_clock: hm\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2848,
        160
      ],
      "id": "c324b5bd-2ef5-406e-85f5-e06cb55a12c9",
      "name": "Calcula tempo restante"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('start').first().json[\"body.instance\"] }}{{ $('start').first().json.usr_id }}{{ $('dados_usr').first().json.whatsapp_numero }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -3248,
        368
      ],
      "id": "6e26e2d6-c8f5-4df9-befe-c57221dc681d",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -2288,
        544
      ],
      "id": "93390cd1-0a65-4d5e-a198-3bca221e49ce",
      "name": "Chat Memory - Delete All (final)1",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// ============================================\n// CONTROLE DE INTERAÇÕES - N8N CODE NODE\n// Simplificado para retorno do contador\n// ============================================\n\n// Recupera memória agregada para este usuário\nlet memoryData = null;\ntry {\n  const items = $input.all();\n  if (items?.length) {\n    memoryData = items[0]?.json ?? null;\n  }\n} catch {\n  memoryData = null;\n}\n\n// Calcula a interação atual\nlet interactionCount = 1;\nconst messages = memoryData?.messages;\nif (Array.isArray(messages)) {\n  const systemMessages = messages.filter(msg => msg?.system);\n  interactionCount = systemMessages.length + 1;\n}\n\n// Retorna somente o contador (mantendo paired item)\nreturn [{\n  json: {\n    interaction_count: interactionCount\n  },\n  pairedItem: 0\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1840,
        160
      ],
      "id": "4f15b7b2-6a14-424a-aa22-56745192179a",
      "name": "intertion_count"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "fVrO1PaqFuA957u0",
          "mode": "list",
          "cachedResultName": "MindQuest",
          "cachedResultUrl": "/projects/u1M57XAwIiLpPwjp/datatables/fVrO1PaqFuA957u0"
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -3856,
        160
      ],
      "id": "617a5590-5462-4247-a8ed-4dffe40ca4f5",
      "name": "mindquest_config"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "instanceName": "={{ $('start').first().json[\"body.instance\"] }}",
            "remoteJid": "={{ $('start').first().json[\"body.data.key.remoteJid\"] }}",
            "messageText": "={{ $('organiza_json').first().json.user_message }}   Acesse: https://mindquest.pt/auth?token?{{ $json.token_acesso }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -192,
        -128
      ],
      "id": "84146ffe-2179-49fe-8ab2-c1676d5ba61f",
      "name": "Call 'sw_send_message_with_retry'"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "instanceName": "={{ $('start').first().json[\"body.instance\"] }}",
            "remoteJid": "={{ $('start').first().json[\"body.data.key.remoteJid\"] }}",
            "messageText": "={{ $('organiza_json').first().json.user_message }} "
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -272,
        368
      ],
      "id": "4dd208c7-deec-4a2f-90bb-f64dc23f405e",
      "name": "Call 'sw_send_message_with_retry'1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "instanceName": "={{ $('start').first().json[\"body.instance\"] }}",
            "remoteJid": "={{ $('start').first().json[\"body.data.key.remoteJid\"] }}",
            "messageText": "=Nossa que legal que você quer conversar mais...\nMas nossa conversa já foi concluído. \n\nA ideia do Mindquest é te ajudar em reflexões mais profundas para seu desenvolvimento pessoal.\n\nVolte em {{$('Calcula tempo restante').first().json.remaining_hm}} às {{$('Calcula tempo restante').first().json.unlock_clock}}. \n\nSeu painel já está atualizado 🙌"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -1136,
        -112
      ],
      "id": "f55db40b-6034-4c27-a95b-40a8e438c1c4",
      "name": "Call 'sw_send_message_with_retry'2"
    },
    {
      "parameters": {
        "description": "call this tool to guide the user on what to talk to the assistant about",
        "workflowId": {
          "__rl": true,
          "value": "aMJIDSGZkNbcPxjc",
          "mode": "list",
          "cachedResultUrl": "/workflow/aMJIDSGZkNbcPxjc",
          "cachedResultName": "sw_conversa_guide"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -992,
        400
      ],
      "id": "4211fa1b-0846-4b70-bef4-6d2e8a069b69",
      "name": "user_conversation_guide"
    },
    {
      "parameters": {
        "description": "call this tool to guide the agent on what to talk to the user about",
        "workflowId": {
          "__rl": true,
          "value": "QIlkK8StiAVCwY0U",
          "mode": "list",
          "cachedResultUrl": "/workflow/QIlkK8StiAVCwY0U",
          "cachedResultName": "sw_agent_conversation_guide"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -800,
        400
      ],
      "id": "56845ffd-40a3-471c-8fea-c45c543f9a95",
      "name": "agent_conversation_guide´"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE usuarios\nSET \n  token_acesso = gen_random_uuid() || $1 || EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint,\n  token_expira_em = CURRENT_TIMESTAMP + INTERVAL '10 days'\nWHERE id = $1;\n\nSELECT token_acesso \nFROM usuarios \nWHERE id = $1;\n",
        "options": {
          "queryReplacement": "={{ $('dados_usr').item.json.id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -384,
        -128
      ],
      "id": "653e8936-046d-41dd-bc24-fdea866c6288",
      "name": "update_token",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $('intertion_count').first().json.interaction_count }}",
              "rightValue": "={{ $('mindquest_config').item.json.limit_iteration }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              },
              "id": "20decd9a-8a71-4c52-86de-1891070b3b96"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -672,
        176
      ],
      "id": "69d8f022-ee17-4a28-8757-6a289a680c31",
      "name": "É a ulltima?"
    }
  ],
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "mindquest_config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dados_usr": {
      "main": [
        [
          {
            "node": "perfil_bigfive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "perfil_bigfive": {
      "main": [
        [
          {
            "node": "Build Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Keys": {
      "main": [
        [
          {
            "node": "Redis GET Lock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET Lock": {
      "main": [
        [
          {
            "node": "Calcula tempo restante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LOCK ativo?": {
      "main": [
        [
          {
            "node": "Call 'sw_send_message_with_retry'2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transcrição",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcrição": {
      "main": [
        [
          {
            "node": "Chat Memory  - Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory  - Get": {
      "main": [
        [
          {
            "node": "intertion_count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "memory": {
      "ai_memory": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory  - Get1",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory - Insert",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory  - Get",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Insert": {
      "main": [
        [
          {
            "node": "Interações (Pré-Agente)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interações (Pré-Agente)": {
      "main": [
        [
          {
            "node": "Call 'sw_send_message_with_retry'2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mentor de vida",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "get_history": {
      "ai_tool": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mentor de vida": {
      "main": [
        [
          {
            "node": "organiza_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "organiza_json": {
      "main": [
        [
          {
            "node": "É a ulltima?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory  - Get1": {
      "main": [
        [
          {
            "node": "junta_dados_gravacao",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "junta_dados_gravacao": {
      "main": [
        [
          {
            "node": "Grava_chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Grava_chat": {
      "main": [
        [
          {
            "node": "experts_panas",
            "type": "main",
            "index": 0
          },
          {
            "node": "Resumo das conversas",
            "type": "main",
            "index": 0
          },
          {
            "node": "experts_humor_energia",
            "type": "main",
            "index": 0
          },
          {
            "node": "experts_sabotadores",
            "type": "main",
            "index": 0
          },
          {
            "node": "Expert_Insights",
            "type": "main",
            "index": 0
          },
          {
            "node": "experts_bigfive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Resumo das conversas",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Resumo das conversas": {
      "main": [
        [
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table": {
      "main": [
        [
          {
            "node": "Gamificação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Delete All (final)": {
      "main": [
        [
          {
            "node": "Redis SET Lock (12h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Resumo das conversas",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Calcula tempo restante": {
      "main": [
        [
          {
            "node": "LOCK ativo?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "intertion_count": {
      "main": [
        [
          {
            "node": "Chat Memory - Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mindquest_config": {
      "main": [
        [
          {
            "node": "dados_usr",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "user_conversation_guide": {
      "ai_tool": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "agent_conversation_guide´": {
      "ai_tool": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "update_token": {
      "main": [
        [
          {
            "node": "Call 'sw_send_message_with_retry'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É a ulltima?": {
      "main": [
        [
          {
            "node": "Chat Memory  - Get1",
            "type": "main",
            "index": 0
          },
          {
            "node": "update_token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call 'sw_send_message_with_retry'1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "start": [
      {
        "json": {
          "usr_id": "d949d81c-9235-41ce-8b3b-6b5d593c5e24",
          "body.instance": "MindQuest",
          "body.data.key.id": "2AFB9BC63852188B1F6C",
          "body.data.key.remoteJid": "351932786582@s.whatsapp.net",
          "body.data.key.fromMe": false,
          "body.data.pushName": "Aldo Santos",
          "body.data.messageType": "audioMessage"
        }
      }
    ]
  },
  "versionId": "824e5c3f-8de9-4c1e-a2fe-06bea47cf7ac",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-22T11:58:40.049Z",
      "updatedAt": "2025-10-22T11:58:40.049Z",
      "role": "workflow:owner",
      "workflowId": "aRonGjwfYoY1UUHH",
      "projectId": "u1M57XAwIiLpPwjp",
      "project": {
        "createdAt": "2025-09-16T16:13:20.606Z",
        "updatedAt": "2025-09-25T16:38:18.729Z",
        "id": "u1M57XAwIiLpPwjp",
        "name": "Aldo Santos <lindualdo@hotmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-09-16T16:13:20.606Z",
            "updatedAt": "2025-09-16T16:13:20.606Z",
            "userId": "fa864d51-475e-4765-b3b4-12788525a3e6",
            "projectId": "u1M57XAwIiLpPwjp",
            "user": {
              "createdAt": "2025-09-16T16:13:20.056Z",
              "updatedAt": "2025-10-27T08:00:06.115Z",
              "id": "fa864d51-475e-4765-b3b4-12788525a3e6",
              "email": "lindualdo@hotmail.com",
              "firstName": "Aldo",
              "lastName": "Santos",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-09-16T16:22:10.583Z",
                "personalization_survey_n8n_version": "1.108.1"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "jUAvu7DUAzyqZhJd",
                "userActivatedAt": 1758041156747,
                "easyAIWorkflowOnboarded": true,
                "dismissedCallouts": {
                  "preBuiltAgentsModalCallout": true
                },
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1759918723295
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-27",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}