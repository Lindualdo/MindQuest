{
  "createdAt": "2025-09-30T11:31:35.749Z",
  "updatedAt": "2025-10-30T18:06:07.229Z",
  "id": "2LwxT1Pnnaheh10M",
  "name": "chat_onboarding",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "remoteJid"
            },
            {
              "name": "pushName"
            },
            {
              "name": "id"
            },
            {
              "name": "whatsapp_number"
            },
            {
              "name": "evolution_instancia"
            },
            {
              "name": "menssagem"
            }
          ]
        }
      },
      "id": "f1e37f55-c1c3-470d-b404-1c66cecd2b47",
      "name": "start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2320,
        -112
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "sessionData",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}",
        "options": {}
      },
      "id": "46e47ced-28c3-4a20-9778-c919fae7a35e",
      "name": "Redis Get",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2096,
        -112
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.item.json.sessionData;\nlet session = {};\ntry {\n  if (raw) session = JSON.parse(raw);\n} catch (error) {\n  session = {};\n}\n\nconst normalizeEstado = (value) => {\n  if (!value) return 'inicio';\n  if (value === 'nome_coletado') return 'esperando_nome';\n  if (value === 'assistente_pendente') return 'esperando_email';\n  if (value === 'faixa_pendente') return 'esperando_faixa';\n  return value;\n};\n\nconst estado = normalizeEstado(session.estado);\nconst nome_preferido = session.nome_preferido || null;\nconst email_usuario = session.email_usuario || null;\nconst faixa_etaria = session.faixa_etaria || null;\n\nconst stateOrder = {\n  inicio: 1,\n  esperando_nome: 2,\n  esperando_email: 3,\n  esperando_faixa: 4,\n  confirmacao_pendente: 5,\n  completo: 6,\n};\n\nconst interaction_count = stateOrder[estado] || 2;\n\nlet next_focus = '';\nif (estado === 'inicio') {\n  next_focus = 'ONBOARDING#1: Sauda√ß√£o curta + perguntar COMO QUER SER CHAMADO(A). Uma √∫nica pergunta.';\n} else if (estado === 'esperando_nome') {\n  next_focus = 'ONBOARDING#2: Agrade√ßa e solicite o E-MAIL do usu√°rio. Destaque que precisa ser um endere√ßo v√°lido.';\n} else if (estado === 'esperando_email') {\n  next_focus = 'ONBOARDING#3: Agrade√ßa e pe√ßa a FAIXA ET√ÅRIA. Liste as op√ß√µes 1 a 7 e pe√ßa s√≥ o n√∫mero.';\n} else if (estado === 'esperando_faixa') {\n  next_focus = 'ONBOARDING#4: Informe que vai consolidar as informa√ß√µes e aguarde a confirma√ß√£o final do usu√°rio.';\n} else {\n  next_focus = 'ONBOARDING#5: Aguarde apenas a confirma√ß√£o do usu√°rio, sem abrir novos t√≥picos.';\n}\n\nconst is_last_interaction = estado === 'confirmacao_pendente' || estado === 'completo';\n\nreturn {\n  json: {\n    estado,\n    nome_preferido,\n    email_usuario,\n    faixa_etaria,\n    interaction_count,\n    next_focus,\n    is_last_interaction,\n  },\n};"
      },
      "id": "dd6e19ad-8795-4b6a-82e6-3902693500ff",
      "name": "Code - Controller (interations-style)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        -112
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# USER PROMPT - ONBOARDING MINDQUEST (interations-style)\n\n<contexto>\nMensagem do Usu√°rio: {{ $('start').item.json.menssagem }}\nEstado Atual: {{ $('Code - Controller (interations-style)').item.json.estado }}\nNome Preferido: {{ $('Code - Controller (interations-style)').item.json.nome_preferido }}\nE-mail informado: {{ $('Code - Controller (interations-style)').item.json.email_usuario }}\n</contexto>\n\n<controle>\nInteraction: {{ $('Code - Controller (interations-style)').item.json.interaction_count }}\nnext_focus: {{ $('Code - Controller (interations-style)').item.json.next_focus }}\n√â √∫ltima intera√ß√£o: {{ $('Code - Controller (interations-style)').item.json.is_last_interaction }}\nREGRAS: Siga EXACTAMENTE o next_focus. N√£o adicione perguntas extras nem promessas que o sistema n√£o confirma.\n</controle>\n\n<templates>\n1: \"Oi! üëã Que bom ter voc√™ aqui no MindQuest!\n\nVamos come√ßar criando o seu espa√ßo pessoal. √â rapidinho, prometo ‚Äî s√£o s√≥ 3 perguntinhas pra eu te conhecer melhor e ajustar tudo √† sua forma de pensar.\n\nComo voc√™ prefere ser chamado(a)?\"\n2: \"Perfeito, [NOME]! Agora, informe um e-mail para recuperar seus dados caso perca esse numero do WhatsApp.\"\n3: \"√ìtimo! Pra personalizar ainda mais, me conta sua faixa et√°ria. Responda apenas com o n√∫mero correspondente:\n\n1Ô∏è‚É£ 13 a 17 anos\n2Ô∏è‚É£ 18 a 24 anos\n3Ô∏è‚É£ 25 a 34 anos\n4Ô∏è‚É£ 35 a 44 anos\n5Ô∏è‚É£ 45 a 54 anos\n6Ô∏è‚É£ 55 a 64 anos\n7Ô∏è‚É£ 65 anos ou mais\"\n4: \"Perfeito! Vou juntar as informa√ß√µes e te enviar um resumo pra voc√™ confirmar, tudo bem?\"\n5: \"Obrigado pela resposta! Assim que voc√™ confirmar, finalizo seu acesso imediatamente. üôå\"\n</templates>",
        "options": {
          "systemMessage": "=# SYSTEM\n- Fale PT-BR.\n- Obede√ßa ao next_focus.\n- Se for a √∫ltima intera√ß√£o, n√£o pergunte.\n- Direto e cordial."
        }
      },
      "id": "6fc906ee-591c-4c39-a6e8-161b5935379f",
      "name": "Agent AI (interations-style)",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1632,
        -112
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "73d4d1a9-90bc-4e66-82e6-b08b3f827df8",
      "name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1680,
        192
      ],
      "credentials": {
        "openRouterApi": {
          "id": "rSnkOnnAHyfayLJt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.first().json.output || '';\nconst controllerState = $('Code - Controller (interations-style)').first().json.estado || 'inicio';\nconst incomingMessage = String($('start').first().json.menssagem || '').trim();\n\nlet out_text = String(raw || '').trim();\nlet proximo_estado = null;\nlet tipo = 'mensagem';\n\nlet nome_usuario = null;\nlet email_usuario = null;\nlet faixa_etaria = null;\nlet faixa_etaria_codigo = null;\n\nlet prev = {};\ntry {\n  prev = JSON.parse($('Redis Get').first().json.sessionData || '{}');\n} catch (error) {\n  prev = {};\n}\n\nconst prevNome = typeof prev.nome_preferido === 'string' ? prev.nome_preferido.trim() : null;\nconst prevEmail = typeof prev.email_usuario === 'string' ? prev.email_usuario.trim() : null;\nconst prevFaixa = typeof prev.faixa_etaria === 'string' ? prev.faixa_etaria : null;\nconst prevFaixaCodigo = typeof prev.faixa_etaria_codigo === 'string' ? prev.faixa_etaria_codigo : null;\n\nnome_usuario = prevNome;\nemail_usuario = prevEmail;\nfaixa_etaria = prevFaixa;\nfaixa_etaria_codigo = prevFaixaCodigo;\n\nconst normalizeEstado = (value) => {\n  if (!value) return 'inicio';\n  if (value === 'nome_coletado') return 'esperando_nome';\n  if (value === 'assistente_pendente') return 'esperando_email';\n  if (value === 'faixa_pendente') return 'esperando_faixa';\n  return value;\n};\n\nconst isValidEmail = (value) => {\n  if (!value) return false;\n  const email = value.trim();\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  return regex.test(email);\n};\n\nconst stripAccents = (value) =>\n  value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n\nconst ageOptions = {\n  '1': '13-17',\n  '2': '18-24',\n  '3': '25-34',\n  '4': '35-44',\n  '5': '45-54',\n  '6': '55-64',\n  '7': '65+',\n};\n\nconst ageLabels = {\n  '1': '13 a 17 anos',\n  '2': '18 a 24 anos',\n  '3': '25 a 34 anos',\n  '4': '35 a 44 anos',\n  '5': '45 a 54 anos',\n  '6': '55 a 64 anos',\n  '7': '65 anos ou mais',\n};\n\nconst buildSummary = (nome, email, faixaLabel) => {\n  const exibNome = nome && nome.trim() ? nome.trim() : 'n√£o informado';\n  const exibEmail = email && email.trim() ? email.trim() : 'n√£o informado';\n  const exibFaixa = faixaLabel || 'n√£o informada';\n  return `Confere se est√° tudo certo? üëá\n‚Ä¢ Nome preferido: ${exibNome}\n‚Ä¢ E-mail: ${exibEmail}\n‚Ä¢ Faixa et√°ria: ${exibFaixa}\n\nSe quiser alterar, envie o dado correto (ex.: \"email novo@dominio.com\" ou \"faixa 3\").\n\nEst√° correto?\nResponda: Sim ou altere\n`;\n};\n\nconst estado = normalizeEstado(controllerState);\nconst mensagem = incomingMessage;\nconst mensagemLimpa = mensagem.trim();\n\nif (estado === 'inicio') {\n  proximo_estado = 'esperando_nome';\n  if (!out_text) {\n    out_text = 'Oi! üëã Bem-vindo ao MindQuest!\\n\\nVamos fazer seu cadastro r√°pido. S√£o s√≥ 3 perguntinhas e j√° liberamos tudo pra voc√™.\\n\\nComo voc√™ prefere ser chamado(a)?';\n  }\n} else if (estado === 'esperando_nome') {\n  if (mensagemLimpa.length >= 2) {\n    nome_usuario = mensagemLimpa;\n    proximo_estado = 'esperando_email';\n    if (!out_text) {\n      out_text = `Perfeito, ${nome_usuario}! Agora, informe um e-mail para recuperar seus dados caso perca esse numero do WhatsApp.`;\n    }\n  } else {\n    proximo_estado = 'esperando_nome';\n    if (!out_text) {\n      out_text = 'Preciso de um nome com pelo menos 2 caracteres. Como voc√™ prefere ser chamado(a)?';\n    }\n  }\n} else if (estado === 'esperando_email') {\n  if (isValidEmail(mensagemLimpa)) {\n    email_usuario = mensagemLimpa.trim().toLowerCase();\n    proximo_estado = 'esperando_faixa';\n    if (!out_text) {\n      out_text = 'Anotado! Agora me conta sua faixa et√°ria. Responda apenas com o n√∫mero correspondente (1 a 7).';\n    }\n  } else {\n    proximo_estado = 'esperando_email';\n    if (!out_text) {\n      out_text = 'Esse formato n√£o parece um e-mail v√°lido. Pode mandar no formato nome@dominio.com?';\n    }\n  }\n} else if (estado === 'esperando_faixa') {\n  const match = mensagemLimpa.match(/^([1-7])$/);\n  if (match) {\n    faixa_etaria_codigo = match[1];\n    faixa_etaria = ageOptions[faixa_etaria_codigo];\n    proximo_estado = 'confirmacao_pendente';\n    out_text = buildSummary(nome_usuario || prevNome, email_usuario || prevEmail, ageLabels[faixa_etaria_codigo] || faixa_etaria);\n  } else {\n    proximo_estado = 'esperando_faixa';\n    if (!out_text) {\n      out_text = 'Para concluir, preciso que responda apenas com o n√∫mero de 1 a 7 correspondente √† sua faixa et√°ria.';\n    }\n  }\n} else if (estado === 'confirmacao_pendente') {\n  const normalized = stripAccents(mensagemLimpa).toLowerCase().replace(/[.!?]+$/g, '').trim();\n  const isConfirm = () => {\n    if (!normalized) return false;\n    if (/^confirm(o|ar|ado|ada)$/.test(normalized)) return true;\n    const confirmations = new Set(['sim', 'confirmo', 'confirmar', 'confirmado', 'confirmada', 'tudo certo', 'isso mesmo', 'ok', 'okay', 'pode seguir', 'pode continuar', 'perfeito', 'certo']);\n    return confirmations.has(normalized);\n  };\n\n  if (isConfirm()) {\n    proximo_estado = 'completo';\n    tipo = 'finalizado';\n    if (!out_text) {\n      out_text = 'Perfeito! Vou finalizar seu acesso agora.';\n    }\n  } else {\n    let handled = false;\n    const extractAfterKeyword = (keyword) => {\n      const pattern = new RegExp(`^\\\\s*${keyword}\\\\s*[:\\\\-]?\\\\s*(.+)$`, 'i');\n      const match = mensagem.match(pattern);\n      return match ? match[1].trim() : null;\n    };\n\n    const emailByPrefix = extractAfterKeyword('email');\n    if (!handled && emailByPrefix && isValidEmail(emailByPrefix)) {\n      email_usuario = emailByPrefix.trim().toLowerCase();\n      handled = true;\n    }\n\n    const faixaByPrefix = extractAfterKeyword('faixa');\n    if (!handled && faixaByPrefix) {\n      const faixaMatch = faixaByPrefix.match(/([1-7])/);\n      if (faixaMatch) {\n        faixa_etaria_codigo = faixaMatch[1];\n        faixa_etaria = ageOptions[faixa_etaria_codigo];\n        handled = true;\n      }\n    }\n\n    const nomeByPrefix = extractAfterKeyword('nome');\n    if (!handled && nomeByPrefix && nomeByPrefix.length >= 2) {\n      nome_usuario = nomeByPrefix;\n      handled = true;\n    }\n\n    if (!handled && isValidEmail(mensagemLimpa)) {\n      email_usuario = mensagemLimpa.trim().toLowerCase();\n      handled = true;\n    }\n\n    if (!handled) {\n      const changeKeywords = new Set(['altere', 'alterar', 'quero alterar']);\n      if (changeKeywords.has(normalized)) {\n        handled = true;\n      }\n    }\n\n    if (!handled) {\n      const faixaMatch = mensagemLimpa.match(/^([1-7])$/);\n      if (faixaMatch) {\n        faixa_etaria_codigo = faixaMatch[1];\n        faixa_etaria = ageOptions[faixa_etaria_codigo];\n        handled = true;\n      }\n    }\n\n    if (!handled && mensagemLimpa.length >= 2 && !/(corrig|ajust|editar)/.test(normalized)) {\n      nome_usuario = mensagemLimpa;\n      handled = true;\n    }\n\n    proximo_estado = 'confirmacao_pendente';\n    out_text = buildSummary(nome_usuario || prevNome, email_usuario || prevEmail, ageLabels[faixa_etaria_codigo] || faixa_etaria);\n    if (!handled) {\n      out_text += '\\nSe quiser alterar, envie o dado completo (ex.: \"email novo@dominio.com\" ou \"faixa 3\").';\n    }\n  }\n} else {\n  proximo_estado = 'esperando_nome';\n  if (!out_text) {\n    out_text = 'Vamos l√°! Como voc√™ prefere ser chamado(a)?';\n  }\n}\n\nif (!nome_usuario && prevNome) {\n  nome_usuario = prevNome;\n}\nif (!email_usuario && prevEmail) {\n  email_usuario = prevEmail;\n}\nif (!faixa_etaria && prevFaixa) {\n  faixa_etaria = prevFaixa;\n}\nif (!faixa_etaria_codigo && prevFaixaCodigo) {\n  faixa_etaria_codigo = prevFaixaCodigo;\n}\n\nreturn {\n  json: {\n    tipo,\n    texto: out_text,\n    proximo_estado,\n    nome_usuario,\n    email_usuario,\n    faixa_etaria,\n    faixa_etaria_codigo,\n    nome_assistente: 'assistente',\n  },\n};\n"
      },
      "id": "9db5a149-5c6c-45dc-a81e-72e4623755f9",
      "name": "Code - Parse Determin√≠stico",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1264,
        -112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.tipo }}",
              "rightValue": "finalizado",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "id": "0531552e-c58e-4386-a7c8-0fe2f618b330"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f0fbfca2-b292-462c-8cc8-e441d301c20b",
      "name": "IF Finalizado",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1072,
        -112
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}",
        "value": "={{ (() => {\n  let prev = {};\n  try {\n    const raw = $('Redis Get').first().json.sessionData;\n    prev = raw ? JSON.parse(raw) : {};\n  } catch (error) {\n    prev = {};\n  }\n  const ai = $('Code - Parse Determin√≠stico').first().json || {};\n  const mapEstado = (value) => {\n    if (!value) return null;\n    if (['inicio', 'esperando_nome', 'esperando_email', 'esperando_faixa', 'confirmacao_pendente', 'completo'].includes(value)) {\n      return value;\n    }\n    if (value === 'nome_coletado') return 'esperando_nome';\n    if (value === 'assistente_pendente') return 'esperando_email';\n    if (value === 'faixa_pendente') return 'esperando_faixa';\n    return null;\n  };\n\n  const nextEstado = mapEstado(ai.proximo_estado) || mapEstado(prev.estado) || 'inicio';\n  const nome = ai.nome_usuario || prev.nome_preferido || null;\n  const email = ai.email_usuario || prev.email_usuario || null;\n  const faixa = ai.faixa_etaria || prev.faixa_etaria || null;\n  const faixaCodigo = ai.faixa_etaria_codigo || prev.faixa_etaria_codigo || null;\n\n  return JSON.stringify({\n    nome_preferido: nome,\n    email_usuario: email,\n    nome_assistente: 'assistente',\n    faixa_etaria: faixa,\n    faixa_etaria_codigo: faixaCodigo,\n    estado: nextEstado\n  });\n})() }}",
        "expire": true,
        "ttl": 86400
      },
      "id": "21b21f2c-3324-40f8-bcc3-400342f9d26f",
      "name": "Redis Update",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -608,
        -16
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO usuarios (\n  whatsapp_numero,\n  nome,\n  nome_preferencia,\n  email,\n  nome_assistente,\n  token_acesso,\n  token_expira_em,\n  status_onboarding,\n  faixa_etaria\n)\nVALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  'assistente',\n  gen_random_uuid() || $5 || EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint,\n  CURRENT_TIMESTAMP + INTERVAL '15 days',\n  'completo',\n  $6\n)\nRETURNING id, token_acesso, whatsapp_numero, nome_preferencia, nome_assistente, email;",
        "options": {
          "queryReplacement": "={{ [\n  $('start').first().json.whatsapp_number,\n  $('start').item.json.pushName,\n  $('Code - Parse Determin√≠stico').item.json.nome_usuario,\n  $('Code - Parse Determin√≠stico').item.json.email_usuario,\n  $('start').item.json.id,\n  $('Code - Parse Determin√≠stico').item.json.faixa_etaria\n] }}"
        }
      },
      "id": "190b7cae-aaee-474d-8351-8f22c031fbeb",
      "name": "Insert User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -832,
        -272
      ],
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO gamificacao (usuario_id, xp_total, nivel_atual, xp_proximo_nivel, titulo_nivel, streak_conversas_dias, streak_protecao_usada, quest_diaria_status, quest_diaria_progresso, quest_diaria_descricao, quest_diaria_data, conquistas_desbloqueadas, total_conversas, total_reflexoes, melhor_streak)\nVALUES ($1::uuid, 0, 1, 200, 'Explorador', 0, false, 'pendente', 0, 'D√™ o primeiro passo: inicie sua primeira conversa comigo!', CURRENT_DATE, '[]'::jsonb, 0, 0, 0);",
        "options": {
          "queryReplacement": "={{ [$json.id] }}"
        }
      },
      "id": "ad794eba-b4ab-43d5-bca8-d864d854df3e",
      "name": "Insert Gamif",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -624,
        -272
      ],
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dados = $('Code - Parse Determin√≠stico').first().json || {};\nconst historico = (() => {\n  try {\n    return JSON.parse($('Redis Get').first().json.sessionData || '{}');\n  } catch (error) {\n    return {};\n  }\n})();\n\nconst preferido = (dados.nome_usuario && dados.nome_usuario.trim())\n  || (historico.nome_preferido && historico.nome_preferido.trim())\n  || ($('start').item.json.pushName || '').trim()\n  || 'voc√™';\nconst nomeUsuario = preferido;\nconst token = $('Insert User').first().json.token_acesso;\nconst url = `https://mindquest.pt/auth?token=${token}`;\n\nconst mensagem = `Perfeito, ${nomeUsuario}! üòä\n\nSeu acesso est√° liberado: ${url}\n\nüîí Esse link j√° vem com seu token pessoal, sem precisar criar senha.\n\nSe quiser um guia r√°pido pra aproveitar melhor, visite www.mindquest.pt/suporte/conversation-guide.\n\nQuando quiser, √© s√≥ me contar o que est√° acontecendo por a√≠.`;\n\nreturn { json: { mensagem } };"
      },
      "id": "1ba7f577-bd39-4e78-8270-c8e84b3ab73e",
      "name": "monta link para usuario",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        -272
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('start').first().json.evolution_instancia }}{{ $('start').first().json.whatsapp_number }}",
        "sessionTTL": 86400,
        "contextWindowLength": 20
      },
      "id": "f2429617-d20b-4fdb-9133-1eb66836cc8b",
      "name": "Redis Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        -1488,
        176
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "messageText": "={{ $json.mensagem }}",
            "remoteJid": "={{ $('start').item.json.remoteJid }}",
            "instanceName": "={{ $('start').item.json.evolution_instancia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -224,
        -272
      ],
      "id": "b2169a8b-f3ae-45f1-a0a6-d9e3ab113139",
      "name": "Call 'sw_send_message_with_retry'"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "messageText": "={{ $('Code - Parse Determin√≠stico').item.json.texto }}",
            "remoteJid": "={{ $('start').item.json.remoteJid }}",
            "instanceName": "={{ $('start').item.json.evolution_instancia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -832,
        -16
      ],
      "id": "f0fca6be-25bb-4416-8d9c-659cfbb21030",
      "name": "Call 'sw_send_message_with_retry'1"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}"
      },
      "id": "5cadde51-c799-4abe-bc79-9ca120d75784",
      "name": "Redis Delete",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -16,
        -272
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    }
  ],
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "Redis Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Get": {
      "main": [
        [
          {
            "node": "Code - Controller (interations-style)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Controller (interations-style)": {
      "main": [
        [
          {
            "node": "Agent AI (interations-style)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent AI (interations-style)": {
      "main": [
        [
          {
            "node": "Code - Parse Determin√≠stico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent AI (interations-style)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code - Parse Determin√≠stico": {
      "main": [
        [
          {
            "node": "IF Finalizado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Finalizado": {
      "main": [
        [
          {
            "node": "Insert User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call 'sw_send_message_with_retry'1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert User": {
      "main": [
        [
          {
            "node": "Insert Gamif",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Gamif": {
      "main": [
        [
          {
            "node": "monta link para usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "monta link para usuario": {
      "main": [
        [
          {
            "node": "Call 'sw_send_message_with_retry'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Agent AI (interations-style)",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sw_send_message_with_retry'": {
      "main": [
        [
          {
            "node": "Redis Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sw_send_message_with_retry'1": {
      "main": [
        [
          {
            "node": "Redis Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "start": [
      {
        "json": {
          "remoteJid": "5512982389360@s.whatsapp.net",
          "pushName": "Aldo",
          "id": "3A260416D4188A53F774",
          "whatsapp_number": "5512982389360",
          "evolution_instancia": "MindQuest",
          "menssagem": "5"
        }
      }
    ]
  },
  "versionId": "ad9cc1a9-b034-457d-8348-ed7d512beccb",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-30T11:31:35.749Z",
      "updatedAt": "2025-09-30T11:31:35.749Z",
      "role": "workflow:owner",
      "workflowId": "2LwxT1Pnnaheh10M",
      "projectId": "u1M57XAwIiLpPwjp",
      "project": {
        "createdAt": "2025-09-16T16:13:20.606Z",
        "updatedAt": "2025-09-25T16:38:18.729Z",
        "id": "u1M57XAwIiLpPwjp",
        "name": "Aldo Santos <lindualdo@hotmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-09-16T16:13:20.606Z",
            "updatedAt": "2025-09-16T16:13:20.606Z",
            "userId": "fa864d51-475e-4765-b3b4-12788525a3e6",
            "projectId": "u1M57XAwIiLpPwjp",
            "user": {
              "createdAt": "2025-09-16T16:13:20.056Z",
              "updatedAt": "2025-10-31T08:00:05.906Z",
              "id": "fa864d51-475e-4765-b3b4-12788525a3e6",
              "email": "lindualdo@hotmail.com",
              "firstName": "Aldo",
              "lastName": "Santos",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-09-16T16:22:10.583Z",
                "personalization_survey_n8n_version": "1.108.1"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "jUAvu7DUAzyqZhJd",
                "userActivatedAt": 1758041156747,
                "easyAIWorkflowOnboarded": true,
                "dismissedCallouts": {
                  "preBuiltAgentsModalCallout": true
                },
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1759918723295
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-31",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}