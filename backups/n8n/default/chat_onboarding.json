{
  "createdAt": "2025-09-30T11:31:35.749Z",
  "updatedAt": "2025-10-27T10:25:47.218Z",
  "id": "2LwxT1Pnnaheh10M",
  "name": "chat_onboarding",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "remoteJid"
            },
            {
              "name": "pushName"
            },
            {
              "name": "id"
            },
            {
              "name": "whatsapp_number"
            },
            {
              "name": "evolution_instancia"
            },
            {
              "name": "menssagem"
            }
          ]
        }
      },
      "id": "c7a44ebe-8cf4-4d61-8abd-0662c411b802",
      "name": "start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1840,
        336
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "sessionData",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}",
        "options": {}
      },
      "id": "4f6012df-fe4d-46b8-9e32-dc596e242de5",
      "name": "Redis Get",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1616,
        336
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.item.json.sessionData; let s={}; try{ if(raw) s=JSON.parse(raw);}catch(e){s={};}\nconst estado = s.estado||'inicio';\nconst nome_preferido = s.nome_preferido||null; const nome_assistente = s.nome_assistente||null;\nlet interaction_count = (estado==='inicio')?1:(estado==='nome_coletado'?2:3);\nlet next_focus='', is_last_interaction=(interaction_count===3);\nif(interaction_count===1){ next_focus='ONBOARDING#1: Sauda√ß√£o curta + perguntar COMO QUER SER CHAMADO(A). Uma √∫nica pergunta.'; }\nif(interaction_count===2){ next_focus='ONBOARDING#2: Agrade√ßa e pe√ßa o NOME DO ASSISTENTE (ex.: Luna, Max, S√°bio). Uma √∫nica pergunta.'; }\nif(interaction_count===3){ next_focus='ONBOARDING#3 (FINAL): N√ÉO PERGUNTAR. S√≥ confirmar e encerrar; o sistema envia o link.'; }\nreturn { json: { estado, nome_preferido, nome_assistente, interaction_count, next_focus, is_last_interaction } };"
      },
      "id": "58040ea6-424a-4872-bb63-2deecd68173f",
      "name": "Code - Controller (interations-style)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        336
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# USER PROMPT - ONBOARDING MINDQUEST (interations-style)\n<contexto>\nMensagem do Usu√°rio: {{ $('start').item.json.menssagem }}\nEstado Atual: {{ $('Code - Controller (interations-style)').item.json.estado }}\nNome Preferido: {{ $('Code - Controller (interations-style)').item.json.nome_preferido }}\nNome Assistente: {{ $('Code - Controller (interations-style)').item.json.nome_assistente }}\n</contexto>\n<controle>\nInteraction: {{ $('Code - Controller (interations-style)').item.json.interaction_count }}\nnext_focus: {{ $('Code - Controller (interations-style)').item.json.next_focus }}\n√â √∫ltima intera√ß√£o: {{ $('Code - Controller (interations-style)').item.json.is_last_interaction }}\nREGRAS: Siga EXACTAMENTE o next_focus. N√£o adicione perguntas extras.\n</controle>\n<templates>\n1: \"Oi! üëã Bem-vindo ao MindQuest!\\n\\nVamos fazer seu cadastro r√°pido. S√£o s√≥ 2 perguntinhas e j√° liberamos tudo pra voc√™.\\n\\nComo voc√™ prefere ser chamado(a)?\"\n2: \"√ìtimo, [NOME]! Agora me d√° um nome. Pode ser: Luna, Coach, Max, S√°bio...\\n\\nComo quer me chamar?\"\n3: \"Perfeito! Vou finalizar seu acesso.\"\n</templates>",
        "options": {
          "systemMessage": "=# SYSTEM\n- Fale PT-BR.\n- Obede√ßa ao next_focus.\n- Se for a √∫ltima intera√ß√£o, n√£o pergunte.\n- Direto e cordial."
        }
      },
      "id": "c2b52b3e-3134-42bd-b232-e1dd51ed5064",
      "name": "Agent AI (interations-style)",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1152,
        336
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "938c6cd5-3a0c-4a38-9910-603666668f46",
      "name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1200,
        624
      ],
      "credentials": {
        "openRouterApi": {
          "id": "rSnkOnnAHyfayLJt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Determin√≠stico ‚Äî mant√©m l√≥gica original + garante nome_usuario no final\nconst raw = $input.first().json.output || '';\nconst estado = $('Code - Controller (interations-style)').first().json.estado;\nconst msg = String($('start').first().json.menssagem || '').trim();\n\nlet out_text = String(raw).trim();\nlet nome_usuario = null;\nlet nome_assistente = null;\nlet proximo_estado = null;\nlet tipo = 'mensagem';\n\n// Fallback do Redis para nome_usuario (usado na fase 'completo')\nlet prev = {};\ntry { prev = JSON.parse($('Redis Get').first().json.sessionData || '{}'); } catch {}\nconst prevNome = (prev && typeof prev.nome_preferido === 'string') ? prev.nome_preferido.trim() : null;\n\nif (estado === 'inicio') {\n  proximo_estado = 'nome_coletado';\n  if (!out_text) {\n    out_text = 'Oi! üëã Bem-vindo ao MindQuest!\\n\\nVamos fazer seu cadastro r√°pido. S√£o s√≥ 2 perguntinhas e j√° liberamos tudo pra voc√™.\\n\\nComo voc√™ prefere ser chamado(a)?';\n  }\n}\nelse if (estado === 'nome_coletado') {\n  if (msg.length >= 2) {\n    nome_usuario = msg;\n    proximo_estado = 'completo';\n    if (!out_text) {\n      out_text = `√ìtimo, ${nome_usuario}! Agora me d√° um nome. Pode ser: Luna, Coach, Max, S√°bio...\\n\\nComo quer me chamar?`;\n    }\n  } else {\n    proximo_estado = 'nome_coletado';\n    if (!out_text) {\n      out_text = 'Vamos l√°! Como voc√™ prefere ser chamado(a)? (m√≠nimo 2 letras)';\n    }\n  }\n}\nelse { // estado === 'completo'\n  // GARANTE nome_usuario usando o que j√° est√° no Redis\n  if (!nome_usuario && prevNome && prevNome.length >= 2) {\n    nome_usuario = prevNome;\n  }\n  if (msg.length >= 2) {\n    nome_assistente = msg;\n    proximo_estado = 'completo';\n    tipo = 'finalizado';\n  } else {\n    proximo_estado = 'completo';\n    if (!out_text) {\n      out_text = 'Quase l√°! Diga o nome do assistente (ex.: Luna, Max, S√°bio) ‚Äî m√≠nimo 2 letras.';\n    }\n  }\n}\n\n// Fallback de seguran√ßa (somente se n√£o finalizado)\nif (!out_text && tipo !== 'finalizado') {\n  out_text = 'Vamos continuar. Como voc√™ prefere ser chamado(a)?';\n}\n\nreturn { json: { tipo, texto: out_text, proximo_estado, nome_usuario, nome_assistente } };\n"
      },
      "id": "5e9f73c6-9635-4d22-b9da-13db81cdc5b0",
      "name": "Code - Parse Determin√≠stico",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        336
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.tipo }}",
              "rightValue": "finalizado",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "id": "0531552e-c58e-4386-a7c8-0fe2f618b330"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bb582131-35f6-4cb8-9c7d-b132572135d6",
      "name": "IF Finalizado",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -592,
        336
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}",
        "value": "={{ ( () => { const prev = $('Redis Get').first().json.sessionData?JSON.parse($('Redis Get').first().json.sessionData):{}; const ai=$('Code - Parse Determin√≠stico').first().json; const allowed=['inicio','nome_coletado','completo']; const next=(ai.proximo_estado&&allowed.includes(ai.proximo_estado))?ai.proximo_estado:(prev.estado||'inicio'); const nome_usuario=ai.nome_usuario||prev.nome_preferido||null; const nome_assistente=ai.nome_assistente||prev.nome_assistente||null; return JSON.stringify({ nome_preferido:nome_usuario, nome_assistente:nome_assistente, estado:next }); })() }}",
        "expire": true,
        "ttl": 86400
      },
      "id": "902eaf95-bef9-42da-8d80-30fe13bd4db7",
      "name": "Redis Update",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -128,
        416
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO usuarios (\n  whatsapp_numero, nome, nome_preferencia, nome_assistente, token_acesso, token_expira_em, status_onboarding, faixa_etaria\n) VALUES (\n  $1, $2, $3, $4,\n  gen_random_uuid() || $5 || EXTRACT(EPOCH FROM CURRENT_TIMESTAMP)::bigint,\n  CURRENT_TIMESTAMP + INTERVAL '15 days',\n  'completo','35-44')\nRETURNING id, token_acesso, whatsapp_numero, nome_preferencia, nome_assistente;",
        "options": {
          "queryReplacement": "={{ [ $('start').first().json.whatsapp_number, $('start').item.json.pushName, $('Code - Parse Determin√≠stico').item.json.nome_usuario, $('Code - Parse Determin√≠stico').item.json.nome_assistente, $('start').item.json.id ] }}"
        }
      },
      "id": "0536316d-8e64-495b-b4cf-e7369ebac5ff",
      "name": "Insert User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -352,
        176
      ],
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO gamificacao (usuario_id, xp_total, nivel_atual, xp_proximo_nivel, titulo_nivel, streak_conversas_dias, streak_protecao_usada, quest_diaria_status, quest_diaria_progresso, quest_diaria_descricao, quest_diaria_data, conquistas_desbloqueadas, total_conversas, total_reflexoes, melhor_streak)\nVALUES ($1::uuid, 0, 1, 200, 'Explorador', 0, false, 'pendente', 0, 'D√™ o primeiro passo: inicie sua primeira conversa comigo!', CURRENT_DATE, '[]'::jsonb, 0, 0, 0);",
        "options": {
          "queryReplacement": "={{ [$json.id] }}"
        }
      },
      "id": "8fee437b-c42a-439c-948c-5c5d6fdab609",
      "name": "Insert Gamif",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -144,
        176
      ],
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let nomeAssistente; try{ const a=JSON.parse($('Agent AI (interations-style)').first().json.output||'{}'); nomeAssistente=a.nome_assistente; }catch{}\nif(!nomeAssistente){ nomeAssistente=$('Code - Parse Determin√≠stico').first().json.nome_assistente||'Assistente'; }\nconst token = $('Insert User').first().json.token_acesso;\nconst url = `https://mindquest.pt/auth?token=${token}`;\nconst mensagem = `Perfeito! Sou ${nomeAssistente} agora üòä\\n\\nPronto! üéâ\\n\\nüìä Sua experi√™ncia j√° foi criada: ${url}\\n\\nüîí Acesso seguro: Esse link j√° cont√©m seu token de autentica√ß√£o pessoal. N√£o precisa criar senha ou login, √© s√≥ clicar e entrar!\\n\\n Recomendo voc√™ dar uma olhada no guia r√°pido a partir do link abaixo, para aproveitar melhor seu assitente:\\n\\n www.mindquest.pt/suporte/conversation-guide\\n\\n Se quiser come√ßar agora, voc√™ j√° pode mandar seu texto ou audio.\\n\\nO que deseja me contar sobre voc√™ hoje?`;\nreturn { json: { mensagem } };"
      },
      "id": "5fae25bc-edd6-490f-871c-680bff085eb5",
      "name": "monta link para usuario",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        48,
        176
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}"
      },
      "id": "d4a29fdd-7793-4db4-9528-fe56ac412846",
      "name": "Redis Delete",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1616,
        272
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('start').first().json.evolution_instancia }}{{ $('start').first().json.whatsapp_number }}",
        "sessionTTL": 86400,
        "contextWindowLength": 20
      },
      "id": "891f72a7-b5be-48b8-b334-324cca8a3dae",
      "name": "Redis Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        -1008,
        608
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "messageText": "={{ $json.mensagem }}",
            "remoteJid": "={{ $('start').item.json.remoteJid }}",
            "instanceName": "={{ $('start').item.json.evolution_instancia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        256,
        176
      ],
      "id": "2fe95fa7-44e5-4674-b4c5-919cb5bc7e20",
      "name": "Call 'sw_send_message_with_retry'"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "U44ZfEwFU77EUthb",
          "mode": "list",
          "cachedResultUrl": "/workflow/U44ZfEwFU77EUthb",
          "cachedResultName": "sw_send_message_with_retry"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "messageText": "={{ $('Code - Parse Determin√≠stico').item.json.texto }}",
            "remoteJid": "={{ $('start').item.json.remoteJid }}",
            "instanceName": "={{ $('start').item.json.evolution_instancia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "instanceName",
              "displayName": "instanceName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "remoteJid",
              "displayName": "remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "messageText",
              "displayName": "messageText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -352,
        416
      ],
      "id": "747b0318-703a-4cda-a613-9392b52fab2a",
      "name": "Call 'sw_send_message_with_retry'1"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=onboarding:{{ $('start').first().json.whatsapp_number }}"
      },
      "id": "d4a12d2a-4c7c-46bb-ab69-4fd5f930b1d1",
      "name": "Redis Delete1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        464,
        176
      ],
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    }
  ],
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "Redis Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Get": {
      "main": [
        [
          {
            "node": "Code - Controller (interations-style)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Controller (interations-style)": {
      "main": [
        [
          {
            "node": "Agent AI (interations-style)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent AI (interations-style)": {
      "main": [
        [
          {
            "node": "Code - Parse Determin√≠stico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent AI (interations-style)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code - Parse Determin√≠stico": {
      "main": [
        [
          {
            "node": "IF Finalizado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Finalizado": {
      "main": [
        [
          {
            "node": "Insert User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call 'sw_send_message_with_retry'1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert User": {
      "main": [
        [
          {
            "node": "Insert Gamif",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Gamif": {
      "main": [
        [
          {
            "node": "monta link para usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "monta link para usuario": {
      "main": [
        [
          {
            "node": "Call 'sw_send_message_with_retry'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Agent AI (interations-style)",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sw_send_message_with_retry'": {
      "main": [
        [
          {
            "node": "Redis Delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sw_send_message_with_retry'1": {
      "main": [
        [
          {
            "node": "Redis Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "start": [
      {
        "json": {
          "remoteJid": "5512982389360@s.whatsapp.net",
          "pushName": "Aldo",
          "id": "3A544CF9530268200864",
          "whatsapp_number": "5512982389360",
          "evolution_instancia": "MindQuest",
          "menssagem": "S√°bio"
        }
      }
    ]
  },
  "versionId": "7cf15412-b39e-4619-827c-847e2d09422f",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-30T11:31:35.749Z",
      "updatedAt": "2025-09-30T11:31:35.749Z",
      "role": "workflow:owner",
      "workflowId": "2LwxT1Pnnaheh10M",
      "projectId": "u1M57XAwIiLpPwjp",
      "project": {
        "createdAt": "2025-09-16T16:13:20.606Z",
        "updatedAt": "2025-09-25T16:38:18.729Z",
        "id": "u1M57XAwIiLpPwjp",
        "name": "Aldo Santos <lindualdo@hotmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-09-16T16:13:20.606Z",
            "updatedAt": "2025-09-16T16:13:20.606Z",
            "userId": "fa864d51-475e-4765-b3b4-12788525a3e6",
            "projectId": "u1M57XAwIiLpPwjp",
            "user": {
              "createdAt": "2025-09-16T16:13:20.056Z",
              "updatedAt": "2025-10-27T08:00:06.115Z",
              "id": "fa864d51-475e-4765-b3b4-12788525a3e6",
              "email": "lindualdo@hotmail.com",
              "firstName": "Aldo",
              "lastName": "Santos",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-09-16T16:22:10.583Z",
                "personalization_survey_n8n_version": "1.108.1"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "jUAvu7DUAzyqZhJd",
                "userActivatedAt": 1758041156747,
                "easyAIWorkflowOnboarded": true,
                "dismissedCallouts": {
                  "preBuiltAgentsModalCallout": true
                },
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1759918723295
                }
              },
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-10-27",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}