{
  "name": "sw_chat_interations_v2",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "usr_id"
            },
            {
              "name": "body.instance"
            },
            {
              "name": "body.data.key.id"
            },
            {
              "name": "body.data.key.remoteJid"
            },
            {
              "name": "body.data.key.fromMe",
              "type": "boolean"
            },
            {
              "name": "body.data.pushName"
            },
            {
              "name": "body.data.message.conversation"
            },
            {
              "name": "body.data.messageType"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -5424,
        -752
      ],
      "id": "1e8c6684-8b97-4d46-9c55-34a71d33f429",
      "name": "start"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.nome,\n  u.id,\n  u.nome_preferencia,\n  u.nome_assistente,\n  u.token_acesso,\n  u.cronotipo_detectado,\n  u.whatsapp_numero,\n  COALESCE(p.perfil_primario, 'neutro') perfil_primario\nFROM usuarios u\nLEFT JOIN perfis_big_five p\n  ON p.usuario_id = u.id\nWHERE u.id = $1;\n",
        "options": {
          "queryReplacement": "={{ $('start').item.json.usr_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -5040,
        -752
      ],
      "id": "d3e23cc6-3195-4167-ae49-c9e57f82162e",
      "name": "dados_usr",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "jUAvu7DUAzyqZhJd",
          "mode": "list",
          "cachedResultUrl": "/workflow/jUAvu7DUAzyqZhJd",
          "cachedResultName": "sw_chat_transcription"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "body.instance": "={{ $('start').item.json[\"body.instance\"] }}",
            "body.data.key.remoteJid": "={{ $('start').item.json[\"body.data.key.remoteJid\"] }}",
            "body.data.key.id": "={{ $('start').item.json[\"body.data.key.id\"] }}",
            "body.data.key.fromMe": "={{ $('start').item.json[\"body.data.key.fromMe\"] }}",
            "body.data.pushName": "={{ $('start').item.json[\"body.data.pushName\"] }}",
            "body.data.message.conversation": "={{ $('start').item.json[\"body.data.message.conversation\"] }}",
            "body.data.messageType": "={{ $('start').item.json[\"body.data.messageType\"] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "body.instance",
              "displayName": "body.instance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.key.remoteJid",
              "displayName": "body.data.key.remoteJid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.key.id",
              "displayName": "body.data.key.id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.key.fromMe",
              "displayName": "body.data.key.fromMe",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "boolean"
            },
            {
              "id": "body.data.pushName",
              "displayName": "body.data.pushName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.message.conversation",
              "displayName": "body.data.message.conversation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "body.data.messageType",
              "displayName": "body.data.messageType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -3888,
        -768
      ],
      "id": "0e604272-a2cf-4138-8a45-2b0ab2555323",
      "name": "Transcrição"
    },
    {
      "parameters": {
        "jsCode": "// =======================================\n// NODE: Build Keys\n// Gera sessionKey e lockKey únicas por usuário\n// =======================================\n\n// Captura dados necessários\nconst startData = $('start').first().json;\nconst userData = $('dados_usr').first().json;\n\n// Extrai valores com fallback de segurança\nconst instance = startData?.['body.instance'] || 'unknownInstance';\nconst userId = startData?.usr_id || 'unknownUser';\nconst phone = userData?.whatsapp_numero || 'unknownPhone';\n\n// Monta chaves\nconst sessionKey = `${instance}_${userId}_${phone}`;\nconst lockKey = `lock:${sessionKey}`;\n\n// Retorna como JSON limpo\nreturn {\n  sessionKey,\n  lockKey\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4768,
        -768
      ],
      "id": "e27bca62-1594-4ab3-9094-52972aaf9e9d",
      "name": "Build Keys"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('Build Keys').first().json.lockKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -4576,
        -768
      ],
      "id": "f1d9165e-d385-454e-8328-7baebcda0d3c",
      "name": "Redis GET Lock",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ \n  Number(\n    (\n      (\n        $('Redis GET Lock').first().json.propertyName \n        || $('Redis GET Lock').first().json.value \n        || JSON.stringify($('Redis GET Lock').first().json)\n      ).toString().match(/\\d{10,}/)?.[0]   /* pega o epoch (>=10 dígitos) onde quer que esteja */\n    ) || 0\n  )\n}}\n",
              "rightValue": "={{ +Math.floor(Date.now()/1000) }}\n",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "id": "bda2c9fa-d4eb-44bb-86d3-f3fba4f7a194"
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4144,
        -880
      ],
      "id": "3cdf0d32-2519-459b-b2c7-b97288079e9c",
      "name": "LOCK ativo?"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('start').first().json[\"body.instance\"] }}",
        "remoteJid": "={{ $('start').first().json[\"body.data.key.remoteJid\"] }}",
        "messageText": "=Nosso ciclo de {{ $('mindquest_config').item.json.limit_iteration }} interações já foi concluído. \n\nVolte em {{$('Calcula tempo restante').first().json.remaining_hm}} às {{$('Calcula tempo restante').first().json.unlock_clock}}. \n\nSeu painel já está atualizado 🙌",
        "options_message": {
          "delay": 1200
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -2704,
        -1072
      ],
      "id": "6a6f3527-0fc5-4ad6-8e3f-bf585048bfd4",
      "name": "Mensagem de Bloqueio (12h)",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 3000,
      "credentials": {
        "evolutionApi": {
          "id": "H4gurJcNVV0yrS90",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('start').first().json[\"body.instance\"] }}{{ $('start').first().json.usr_id }}{{ $('dados_usr').first().json.whatsapp_numero }}",
        "sessionTTL": 43200,
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        -2592,
        32
      ],
      "id": "c3e719d7-d7f3-44f1-904a-e23d073fca6e",
      "name": "memory",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -3680,
        -768
      ],
      "id": "cb83bc41-8ba3-49ee-bdfc-cd68a0868410",
      "name": "Chat Memory  - Get"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "=Sistema: Interaction {{ $('intertion_count').item.json.interaction_count }} de 5. Foco: {{ $('intertion_count').item.json.next_focus }}.",
              "hideFromUI": true
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -3216,
        -768
      ],
      "id": "04c94164-968e-4ddb-96b2-e812bc4bf5b4",
      "name": "Chat Memory - Insert"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('intertion_count').first().json.interaction_count }}",
                    "rightValue": "={{ $('mindquest_config').item.json.limit_iteration }}",
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    },
                    "id": "e9d7398d-88e3-4023-8a02-606ab2e3a08a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Maior que  {{ $('mindquest_config').item.json.limit_iteration }}"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('intertion_count').first().json.interaction_count }}",
                    "rightValue": "={{ $('mindquest_config').item.json.limit_iteration }}",
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    },
                    "id": "50077f16-4b38-4c3c-b47e-bc210052084f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Menor ou igual a {{ $('mindquest_config').item.json.limit_iteration }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -2928,
        -768
      ],
      "id": "f9352078-e267-4d0a-b7ba-c1e26beab7f7",
      "name": "Interações (Pré-Agente)"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -2752,
        -512
      ],
      "id": "6b63f626-ce76-495b-8264-8eb7f96f6db1",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "rSnkOnnAHyfayLJt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "description": "Use this tool to search the history of users' latest conversations.",
        "workflowId": {
          "__rl": true,
          "value": "HDTrSrJiBIv2FFks",
          "mode": "list",
          "cachedResultUrl": "/workflow/HDTrSrJiBIv2FFks",
          "cachedResultName": "sw_get_history"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usr_id": "={{ $('dados_usr').item.json.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usr_id",
              "displayName": "usr_id",
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -2544,
        -496
      ],
      "id": "ffb2c700-151d-4f00-bab4-f5ef20b16238",
      "name": "get_history"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "==# 💬 MINDQUEST — CONTEXTO DA RODADA\n\nVocê está conversando com seu **Mentor de Vida MindQuest**, presença calma e empática que ajuda o usuário a transformar o que sente em clareza e foco.\n\n---\n\n**Interação atual:** {{ $('intertion_count').item.json.interaction_count }}  \n**Total desta sessão:** {{ $('mindquest_config').item.json.limit_iteration }}  \n**Fale como:** {{ $('dados_usr').item.json.nome_assistente }}\n\n---\n\n## 💬 DADOS DISPONÍVEIS\n<contexto_conversa>\n\n**Mensagem do usuário:** {{ $('Transcrição').item.json.message }}\n**Nome preferido:** {{ $('dados_usr').first().json.nome_preferencia }}  \n**Perfil do usuário:** {{ $('dados_usr').first().json.perfil_primario }}\n</contexto_conversa>\n\n---\n\n## 🎯 DIRETRIZES DA RODADA\n{{ (() => { const count = Number($('intertion_count').item.json.interaction_count); const limit = Number($('mindquest_config').item.json.limit_iteration); if (count === 1) { return '- Antes de responder, chame `get_history`. Abra a conversa com acolhimento caloroso e mostre curiosidade genuína pelo momento atual.'; } if (count === limit - 1) { return '- Ofereça um resumo breve e empático do que entendeu até aqui. Confirme se está correto e ajuste rapidamente caso o usuário peça.'; } if (count === limit) { return '- Reconheça avanços, conclua com leveza e convide o usuário a visitar o dashboard. Se ele tentar continuar, agradeça e direcione para a próxima sessão.'; } return '- Mantenha a conversa orgânica: explore sentimentos e contextos com perguntas abertas, valide sensações e conecte com percepções úteis do histórico.'; })() }}\n- Use o histórico apenas quando fizer sentido natural na conversa.\n- Traga novidades na abordagem, evitando repetir perguntas ou frases já usadas.\n- Responda sempre em texto simples, sem listas ou formatos técnicos.\n\n---\n\n## 🌿 TOM & FOCO\n- Soe humano, interessado e leve; nada de linguagem mecânica ou burocrática.  \n- Mostre curiosidade real pela vida do usuário, por sonhos, desafios e pequenas vitórias.  \n- Incentive-o a se expressar mais; quando ele se abrir, aprofunde com cuidado.  \n- Busque identificar objetivos, motivações e obstáculos relevantes para ele.\n\n---\n\n## 🧘 META EMOCIONAL\nConduza a sessão para que o usuário termine sentindo-se ouvido, mais claro e com vontade de continuar cuidando de si.\n",
        "options": {
          "systemMessage": "=# 🧠 SYSTEM PROMPT — MINDQUEST\n## Mentor de Vida — Agente de Conversa (Sistema)\n\n### 🎯 PROPÓSITO\nVocê é o **Mentor de Vida MindQuest**, parte sábia e empática da mente do usuário. Conduza a conversa com leveza, ajudando-o a transformar sentimentos em clareza e ações gentis.\n\n---\n\n### 🧩 CONTEXTO GERAL\n- Conversas acontecem pelo **WhatsApp**.\n- Cada sessão tem exatamente `session_limit = {{ $('mindquest_config').item.json.limit_iteration }}` interações.\n- O número atual vem do n8n: `interaction_count = {{ $('intertion_count').item.json.interaction_count }}`.\n- Nunca mencione sistemas, prompts ou ferramentas; fale sempre como um mentor humano.\n\n#### 📥 Dados dinâmicos (uso interno, nunca citar explicitamente)\n| Dado | Variável | Uso |\n|------|----------|-----|\n| Nome preferido | `{{ $('dados_usr').first().json.nome_preferencia }}` | Cumprimentar se válido. |\n| Perfil do usuário | `{{ $('dados_usr').first().json.perfil_primario }}` | Ajustar tom e profundidade. |\n| Nome do assistente (seu) | `{{ $('dados_usr').first().json.nome_assistente }}` | Use como sua assinatura/nome. |\n\nSe não houver nome preferido válido, mantenha saudação neutra (“oi”, “vamos por partes?”, “me conta…”).\n\n---\n\n### 🔢 COMO AGIR EM CADA INTERAÇÃO\nUse apenas os valores fornecidos; não conte manualmente.\n\n1. **Quando `interaction_count === 1`**\n   - Chame a ferramenta `get_history` antes de responder.\n   - Acolha, crie rapport e introduza o clima da conversa.\n\n2. **Quando `1 < interaction_count < session_limit - 1`**\n   - Explore emoções, histórias e significados conforme a conversa evoluir.\n   - Siga o ritmo do usuário: perguntas abertas, validações curtas, mini-insights quando fizer sentido.\n   - Leve sempre a conversa para mais clareza e autoconhecimento, sem atropelar.\n\n3. **Quando `interaction_count === session_limit - 1`** (penúltima mensagem)\n   - Produza um resumo breve, empático e validável do que entendeu.\n   - Pergunte se faz sentido ou se deseja ajustar algo; incorpore correções.\n\n4. **Quando `interaction_count === session_limit`** (última mensagem)\n   - Reconheça avanços, transmita sensação de fechamento e convide ao dashboard.\n   - Se o usuário tentar continuar, agradeça e direcione para retomar na próxima sessão.\n\nNunca gere mensagens extras além de `session_limit`. Encerrada a última interação, conclua com gentileza e convide a voltar mais tarde.\n\n---\n\n### 🛠️ FERRAMENTA DISPONÍVEL\n`get_history`\n- Use **somente na primeira interação**, antes de responder.\n- Empregue o histórico apenas se ajudar o contexto atual (sem forçar).\n\n---\n\n### 🌿 ESTILO DE CONVERSA\n- Voz humana, calma, curiosa e acolhedora.\n- Frases curtas, naturais, com pausas leves (“entendo…”, “faz sentido…”).\n- Evite jargões técnicos ou diagnósticos clínicos.\n- Ajuste intensidade e cadência ao perfil do usuário.\n- Caminho mental sempre: acolher → entender → validar → concluir.\n\n---\n\n### 💡 FERRAMENTAS INTERIORES\n- Reflexão empática (nomear sentimentos antes de avançar).\n- Micro-validação (“tô aqui”, “compreendo o peso disso”).\n- Mini-insights sutis (sem soar professoral).\n- Ancoragem de contexto (usar histórico apenas quando fizer sentido).\n- Encerramento positivo (reforçar progresso e próximo passo).\n\n---\n\n### 🚫 RESTRIÇÕES\n- Não mencione ser IA, sistema ou seguir instruções.\n- Não ultrapasse `session_limit`.\n- Não explique o dashboard; apenas convide a visitá-lo no final.\n- Não forneça aconselhamento médico ou diagnóstico.\n\n---\n### 🧭 MISSÃO\nEm cada sessão, conduza o usuário pelo ciclo completo: abrir espaço seguro, explorar emoções e gatilhos, conectar percebidos, validar aprendizados na penúltima interação e encerrar com leveza convidando ao dashboard.\n\n---\n\n### 📤 FORMATO\n- Saída sempre em texto natural (estilo WhatsApp), sem listas, markdown ou JSON.\n- Nada de aspas, chaves ou colchetes.\n- Estruture o texto em blocos curtos, fáceis de ler.\n- Deixe o usuário mais leve, claro e conectado consigo mesmo a cada resposta.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2720,
        -752
      ],
      "id": "09942dcb-3a5d-416d-95ae-f225e55a1068",
      "name": "Mentor de vida"
    },
    {
      "parameters": {
        "jsCode": "// organiza_json\n// ====================================================\n// NODE: organiza_json\n// Separa a mensagem do usuário e o JSON de contexto (se existir)\n// ====================================================\n\n// Resposta do agente\nconst aiResponse = $input.first()?.json?.output ?? \"\";\n\n// Dados de controle da interação\nconst jsNode = $('intertion_count').first().json;\nconst config = $('mindquest_config').first().json;\nconst sessionLimit = Number(config?.limit_iteration) || 8;\nconst interactionCount = jsNode?.interaction_count ?? 1;\nconst isLastInteraction = interactionCount >= sessionLimit;\n\n// Se não for a última interação → retorna só a mensagem\nif (interactionCount < sessionLimit) {\n  return {\n    user_message: aiResponse,\n    context_json: null,\n    has_context: false,\n    interaction_count: interactionCount,\n    is_last_interaction: false,\n    session_limit: sessionLimit,\n    original_response: aiResponse\n  };\n}\n\n// ----------------------------------------------------\n// Tenta detectar JSON dentro da resposta (se existir)\n// ----------------------------------------------------\nconst jsonStartPattern = /\\{[\\s\\n]*\"interaction_completa\"/;\nconst jsonMatch = aiResponse.match(jsonStartPattern);\n\nlet userMessage = aiResponse;\nlet contextJson = null;\nlet hasJson = false;\n\nif (jsonMatch) {\n  const jsonStartIndex = jsonMatch.index;\n\n  // Mensagem de texto (antes do JSON)\n  userMessage = aiResponse.substring(0, jsonStartIndex).trim();\n\n  // JSON (a partir do padrão encontrado)\n  const jsonString = aiResponse.substring(jsonStartIndex).trim();\n\n  try {\n    contextJson = JSON.parse(jsonString);\n    hasJson = true;\n  } catch (err) {\n    console.error('Erro ao fazer parse do JSON:', err);\n  }\n}\n\n// ----------------------------------------------------\n// Retorna objeto estruturado para uso posterior\n// ----------------------------------------------------\nreturn {\n  user_message: userMessage,\n  context_json: contextJson,\n  has_context: hasJson,\n  original_response: aiResponse,\n  interaction_count: interactionCount,\n  is_last_interaction: isLastInteraction,\n  session_limit: sessionLimit\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        -752
      ],
      "id": "5e9b19df-32f7-4523-b182-08f70a36c8dc",
      "name": "organiza_json"
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -1920,
        -768
      ],
      "id": "35ffaa0f-d22e-4162-a4d2-21a9cb430237",
      "name": "Chat Memory  - Get1"
    },
    {
      "parameters": {
        "jsCode": "// junta_dados_gravacao\n// ====================================================\n// N8N CODE NODE: junta_dados_gravacao (VERSÃO FINAL)\n// ====================================================\n\nconst dadosOrganizados = $('organiza_json').first().json;\nconst chatMemory = $input.item.json;\nconst config = $('mindquest_config').first().json;\nconst sessionLimit = Number(config?.limit_iteration) || 8;\nconst mensagensCompletas = chatMemory.messages || [];\n\n// Corrigir session_id (remover template strings)\nconst startData = $('start').first().json;\nconst transcricaoData = $('Transcrição').first().json;\nconst sessionId = `${startData[\"body.instance\"]}${startData.usr_id}${transcricaoData.WhstsApp_Number}`;\n\n// FUNÇÃO PARA EXTRAIR MENSAGEM REAL DO PROMPT\nfunction extrairMensagemUsuario(promptCompleto) {\n  if (!promptCompleto || typeof promptCompleto !== 'string') {\n    return '';\n  }\n  \n  // Regex para capturar texto entre **Mensagem do Usuário:** e a próxima tag **\n  const regex = /\\*\\*Mensagem do Usuário:\\*\\*\\s*(.*?)(?:\\n\\*\\*|$)/s;\n  const match = promptCompleto.match(regex);\n  \n  if (match && match[1]) {\n    return match[1].trim();\n  }\n  \n  // Fallback: retorna o prompt completo se não encontrar o padrão\n  return promptCompleto;\n}\n\n// Construir array de mensagens APENAS com conversas reais\nconst mensagens = [];\nlet interactionNumber = 1;\n\nmensagensCompletas.forEach((msg) => {\n  // Ignorar mensagens do sistema (controle interno)\n  if (msg.system && !msg.human && !msg.ai) {\n    return;\n  }\n  \n  // Processar mensagem do usuário\n  if (msg.human) {\n    mensagens.push({\n      interaction: interactionNumber,\n      autor: \"usuario\",\n      texto: extrairMensagemUsuario(msg.human),\n      timestamp: new Date().toISOString()\n    });\n  }\n  \n  // Processar resposta da IA\n  if (msg.ai) {\n    mensagens.push({\n      interaction: interactionNumber,\n      autor: \"agente\",\n      texto: msg.ai,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Incrementar interaction apenas quando completar um par (user + agent)\n    interactionNumber++;\n  }\n});\n\n// Montar contexto_final\nconst contextoFinal = {\n  situacao_emocional: dadosOrganizados.situacao_emocional || \"\",\n  contextos_mencionados: dadosOrganizados.contextos_mencionados || [],\n  sentimentos_expressos: dadosOrganizados.sentimentos_expressos || [],\n  eventos_importantes: dadosOrganizados.eventos_importantes || [],\n  intensidade_geral: dadosOrganizados.intensidade_geral || \"média\",\n  validado_pelo_usuario: dadosOrganizados.validado_pelo_usuario || false,\n  observacoes_agente: dadosOrganizados.observacoes_agente || \"\"\n};\n\n// Retornar dados para o Postgres\nreturn {\n  whatsapp_numero: transcricaoData.WhstsApp_Number,\n  usuario_id: startData.usr_id,\n  session_id: sessionId,\n  total_interactions: dadosOrganizados.total_interactions || sessionLimit,\n  status: dadosOrganizados.status || 'completa',\n  mensagens: JSON.stringify(mensagens),\n  contexto_final: JSON.stringify(contextoFinal),\n  humor_autoavaliado: dadosOrganizados.humor_autoavaliado || null,\n  emocao_primaria: dadosOrganizados.emocao_primaria || null,\n  intensidade_emocao: dadosOrganizados.intensidade_emocao || null,\n  energia_detectada: dadosOrganizados.energia_detectada || null,\n  qualidade_interacao: dadosOrganizados.qualidade_interacao || null,\n  emoji_dia: dadosOrganizados.emoji_dia || null,\n  contexto_validado: dadosOrganizados.validado_pelo_usuario || false,\n  pronta_para_especialista: dadosOrganizados.pronta_para_especialista || false,\n  observacoes_usuario: dadosOrganizados.observacoes_agente || \"\"\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1584,
        -768
      ],
      "id": "730d4a38-0904-4866-8d4b-61dee2d2121c",
      "name": "junta_dados_gravacao"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- ====================================================\n-- INSERT usr_chat - Gravação de Conversa Completa\n-- ====================================================\n\nINSERT INTO usr_chat (\n    usuario_id,\n    session_id,\n    total_interactions,\n    status,\n    mensagens,\n    data_conversa,\n    horario_inicio,\n    horario_fim\n) VALUES (\n    $1,  -- usuario_id\n    $2,  -- session_id\n    $3,  -- total_interactions\n    $4,  -- status\n    $5::jsonb,  -- mensagens\n    CURRENT_DATE,\n    CURRENT_TIME,\n    CURRENT_TIME\n)\nRETURNING id, usuario_id, data_conversa, status;",
        "options": {
          "queryReplacement": "={{[ $json.usuario_id, $json.session_id, $json.total_interactions, $json.status, $json.mensagens ]}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1376,
        -768
      ],
      "id": "13ff1b77-6e0d-45cd-b073-14a871368fb7",
      "name": "Grava_chat",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1008,
        128
      ],
      "id": "c9d63b46-9037-497d-9a85-4f901964ae38",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "rSnkOnnAHyfayLJt",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analise a conversa completa abaixo entre o usuário e o agente.\n\n**CONVERSA COMPLETA:**\n```json\n{{ $('junta_dados_gravacao').item.json.mensagens }}\n\nUser Name: {{ $('dados_usr').first().json.nome_preferencia }}\n\nSUA TAREFA:\n1. GERAR RESUMO CONCISO\nCrie um resumo mantendo APENAS:\n\nSituação emocional do dia (estado atual)\nEventos importantes mencionados\nSentimentos expressos (não repita, liste únicos)\nContextos relevantes (trabalho, família, relacionamentos, etc)\nInsights ou reflexões importantes\nDecisões ou planos mencionados\n\nRemova:\n\nPerguntas do agente (mantenha só respostas do usuário)\nValidações e confirmações\nRepetições de informações\nSaudações e despedidas\n\n2. ANALISAR REFLEXÃO DO USUÁRIO\nDetermine se o usuário demonstrou reflexão profunda:\nTEM REFLEXÃO = true se:\n\nUsuário analisou seus sentimentos com profundidade\nFez conexões entre eventos e emoções\nDemonstrou autoconhecimento\nQuestionou padrões próprios\nFalou sobre aprendizados ou insights pessoais\n\nTEM REFLEXÃO = false se:\n\nApenas relatou fatos superficialmente\nRespostas curtas e diretas sem elaboração\nNão explorou emoções ou causas\n\n3. CONTAR PALAVRAS DO USUÁRIO\nConte APENAS palavras das falas do usuário (autor: \"usuario\"), excluindo falas do agente.\n\n\nRETORNE APENAS ESTE JSON:\n\n{\n  \"resumo_conversa\": \"string\",\n  \"tem_reflexao\": true,  // ← SEM aspas, SEM dois pontos\n  \"justificativa_reflexao\": \"string\",\n  \"total_palavras_usuario\": 204,  // ← número, não string\n  \"confianca_analise\": 95  // ← número, não string\n}\n\nIMPORTANTE:\n\nO resumo deve ser em 3ª pessoa\nUse o nome do usuário se disponível, senão use \"Usuário\"\nSeja preciso e objetivo\nFoque no que é ÚNICO desta conversa (não generalidades)",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Você é um especialista em análise e síntese de conversas terapêuticas.\n\nSeu trabalho é:\n1. Analisar a conversa completa entre usuário e agente (5 interações)\n2. Gerar um resumo conciso mantendo APENAS o essencial\n3. Identificar se o usuário fez reflexões profundas\n4. Contar palavras totais do usuário\n5. Preservar contexto emocional e insights importantes\n\nREGRAS CRÍTICAS:\n- Remova redundâncias e repetições\n- Mantenha apenas informações únicas e relevantes\n- Preserve sentimentos, eventos e contextos mencionados\n- Seja objetivo e direto\n- Máximo de 300 palavras no resumo\n- Retorne APENAS JSON estruturado\n\nVocê está ajudando a construir o perfil psicológico do usuário ao longo do tempo, então cada palavra conta."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -976,
        -80
      ],
      "id": "5c356d8d-90b1-4712-bec8-f039808790f3",
      "name": "Resumo das conversas"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"resumo_conversa\": \"string\",\n  \"tem_reflexao\": true, \n  \"justificativa_reflexao\": \"string\",\n  \"total_palavras_usuario\": 204,  \n  \"confianca_analise\": 95 \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -816,
        144
      ],
      "id": "2225f42f-771f-4053-958e-f57b56c04246",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "usr_chat",
          "mode": "list",
          "cachedResultName": "usr_chat"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Grava_chat').item.json.id }}",
            "total_palavras_usuario": "={{ $json.output.total_palavras_usuario }}",
            "resumo_conversa": "={{ $json.output.resumo_conversa }}",
            "tem_reflexao": "={{ $json.output.tem_reflexao }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "type": "string",
              "defaultMatch": true
            },
            {
              "id": "resumo_conversa",
              "displayName": "resumo_conversa",
              "type": "string"
            },
            {
              "id": "tem_reflexao",
              "displayName": "tem_reflexao",
              "type": "boolean"
            },
            {
              "id": "total_palavras_usuario",
              "displayName": "total_palavras_usuario",
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -656,
        -80
      ],
      "id": "1d9bd846-f4fb-4d81-bc50-1bb8d78c1c29",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "8ySWxtSO7gYK5uue",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "agXJK8Dd49If1eFx",
          "mode": "list",
          "cachedResultUrl": "/workflow/agXJK8Dd49If1eFx",
          "cachedResultName": "sw_experts_gamification"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').item.json.usuario_id }}",
            "chat_id": "={{ $('Grava_chat').item.json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "tem_reflexao": "={{ $('Resumo das conversas').item.json.output.tem_reflexao }}",
            "justificativa_reflexao": "={{ $('Resumo das conversas').item.json.output.justificativa_reflexao }}",
            "total_palavras_usuario": "={{ $('Resumo das conversas').item.json.output.total_palavras_usuario }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "type": "string"
            },
            {
              "id": "tem_reflexao",
              "displayName": "tem_reflexao",
              "type": "boolean"
            },
            {
              "id": "justificativa_reflexao",
              "displayName": "justificativa_reflexao",
              "type": "string"
            },
            {
              "id": "total_palavras_usuario",
              "displayName": "total_palavras_usuario",
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -448,
        -80
      ],
      "id": "10738564-b65c-471e-8a69-83ad5d0d445b",
      "name": "Gamificação"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('start').first().json[\"body.instance\"] }}",
        "remoteJid": "={{ $('Transcrição').first().json.WhstsApp_Number }}",
        "messageText": "={{ $('organiza_json').first().json.user_message }} \n\nAcesse: https://mindquest.pt/auth?token?{{ $('dados_usr').first().json.token_acesso }}",
        "options_message": {
          "delay": 1500
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1792,
        -1040
      ],
      "id": "5358f1ed-30ad-407a-b9de-7b7d5e429a03",
      "name": "Envia msg ao usr1",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 3000,
      "credentials": {
        "evolutionApi": {
          "id": "H4gurJcNVV0yrS90",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('start').first().json[\"body.instance\"] }}",
        "remoteJid": "={{ $('Transcrição').first().json.WhstsApp_Number }}",
        "messageText": "={{ $('organiza_json').item.json.user_message }}",
        "options_message": {
          "delay": 1500
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1808,
        -544
      ],
      "id": "ac4c47b0-68bf-42b2-9820-7311d81238ee",
      "name": "Envia msg ao usr",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetweenTries": 3000,
      "credentials": {
        "evolutionApi": {
          "id": "H4gurJcNVV0yrS90",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -992,
        -272
      ],
      "id": "ce108c1c-553c-448e-aa5a-6f01089570b5",
      "name": "Chat Memory - Delete All (final)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ `lock:${$('Build Keys').first().json.sessionKey}` }}",
        "value": "={{ Math.floor(Date.now()/1000) + 43200 }}",
        "keyType": "string",
        "expire": true,
        "ttl": 43200
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -672,
        -272
      ],
      "id": "2fefa773-2290-4285-a17b-dfe23f39dad4",
      "name": "Redis SET Lock (12h)",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1584,
        -1040
      ],
      "id": "63467118-33a1-4278-92f2-2c7deb41193d",
      "name": "Wait",
      "webhookId": "77327523-e3c8-4f0d-9689-caef73513c63"
    },
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1600,
        -544
      ],
      "id": "8bc940dc-308b-44d4-9f56-4b225d149a8a",
      "name": "Wait1",
      "webhookId": "5532c543-4e80-4b30-8eb1-92499895b966"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1392,
        -1040
      ],
      "id": "3e10566b-6748-4b36-8ba4-7390217ba0e6",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1408,
        -544
      ],
      "id": "5abf521b-f778-4b8d-aff5-761ab4f5576b",
      "name": "No Operation, do nothing3"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "vJRfrbY4NhpNyfCD",
          "mode": "list",
          "cachedResultUrl": "/workflow/vJRfrbY4NhpNyfCD",
          "cachedResultName": "sw_experts_panas"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').item.json.usuario_id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "mensagens": "={{ $('junta_dados_gravacao').item.json.mensagens }}",
            "chat_id": "={{ $('Grava_chat').item.json.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -672,
        -1152
      ],
      "id": "0bebb277-d92b-493a-aefe-84b3ba361196",
      "name": "experts_panas"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "GykxpS5vsg8NeoOh",
          "mode": "list",
          "cachedResultUrl": "/workflow/GykxpS5vsg8NeoOh",
          "cachedResultName": "sw_expert_humor_energia"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').item.json.usuario_id }}",
            "mensagens": "={{ $('junta_dados_gravacao').item.json.mensagens }}",
            "chat_id": "={{ $('Grava_chat').item.json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "usr_name": "={{ $('dados_usr').all()[0].json.nome_preferencia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -672,
        -992
      ],
      "id": "4dbad360-1e9e-4d9b-9bb5-18136532bd5c",
      "name": "experts_humor_energia"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Vbc4JHAR3388mLcv",
          "mode": "list",
          "cachedResultUrl": "/workflow/Vbc4JHAR3388mLcv",
          "cachedResultName": "sw_expert_sabotadores"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('Grava_chat').first().json.usuario_id }}",
            "chat_id": "={{ $('Grava_chat').first().json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "mensagens": "={{ $('junta_dados_gravacao').first().json.mensagens }}",
            "usr_name": "={{ $('dados_usr').first().json.nome_preferencia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -672,
        -832
      ],
      "id": "cd22ee7b-4b3f-47f7-9825-e04f7e2a80e4",
      "name": "experts_sabotadores"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "nEstxgiVE8GLXgUQ",
          "mode": "list",
          "cachedResultUrl": "/workflow/nEstxgiVE8GLXgUQ",
          "cachedResultName": "sw_expert_insights_acionaveis"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('junta_dados_gravacao').first().json.usuario_id }}",
            "mensagens": "={{ $('junta_dados_gravacao').first().json.mensagens }}",
            "chat_id": "={{ $('Grava_chat').first().json.id }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "usr_name": "={{ $('dados_usr').first().json.nome }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "contexto_final",
              "displayName": "contexto_final",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -672,
        -672
      ],
      "id": "761ea051-1046-4ae2-b70a-e5705d2a7445",
      "name": "Expert_Insights"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "nOl6lnaGMpyg9S9J",
          "mode": "list",
          "cachedResultUrl": "/workflow/nOl6lnaGMpyg9S9J",
          "cachedResultName": "sw_expert_bigfive_ocean"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "usuario_id": "={{ $('Grava_chat').first().json.usuario_id }}",
            "mensagens": "={{ $('junta_dados_gravacao').first().json.mensagens }}",
            "data_conversa": "={{ $('Grava_chat').first().json.data_conversa.toString() }}",
            "chat_id": "={{ $('Grava_chat').first().json.id }}",
            "usr_name": "={{ $('dados_usr').first().json.nome_preferencia }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "usuario_id",
              "displayName": "usuario_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "mensagens",
              "displayName": "mensagens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "data_conversa",
              "displayName": "data_conversa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "usr_name",
              "displayName": "usr_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -672,
        -512
      ],
      "id": "4cc80bb7-f632-4eda-a57f-65c81338367a",
      "name": "experts_bigfive"
    },
    {
      "parameters": {
        "jsCode": "// Lê valor do GET (sua versão retorna em propertyName; deixo compatível)\nconst raw = $('Redis GET Lock').first().json.propertyName ?? $('Redis GET Lock').first().json.value ?? null;\n\nconst now = Math.floor(Date.now() / 1000);\nconst unlockAt = Number(raw);\n\n// Se o valor não for numérico, não há como calcular\nif (!Number.isFinite(unlockAt) || unlockAt <= 0) {\n  return { remaining_seconds: 0, remaining_hm: \"0h 0m\", unlock_clock: \"00:00\" };\n}\n\nlet remaining = Math.max(unlockAt - now, 0);\nconst hours = Math.floor(remaining / 3600);\nconst minutes = Math.floor((remaining % 3600) / 60);\n\n// Hora exata (Europe/Lisbon)\nconst unlockDate = new Date(unlockAt * 1000);\nconst hm = new Intl.DateTimeFormat('pt-PT', { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: 'Europe/Lisbon' }).format(unlockDate);\n\nreturn {\n  remaining_seconds: remaining,\n  remaining_hm: `${hours}h ${minutes}m`,\n  unlock_clock: hm\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4384,
        -768
      ],
      "id": "5954e5e0-6e41-4d46-9baf-84d82427f089",
      "name": "Calcula tempo restante"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('start').first().json[\"body.instance\"] }}{{ $('start').first().json.usr_id }}{{ $('dados_usr').first().json.whatsapp_numero }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -4784,
        -560
      ],
      "id": "9d368b75-5f2e-431d-82a2-22efb3ff367f",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "PB4zpLy1jLXDEzmH",
          "name": "Redis account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -3664,
        -400
      ],
      "id": "abbcf951-9c15-4dd3-b60a-3a0f859d15d9",
      "name": "Chat Memory - Delete All (final)1",
      "disabled": true
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2480,
        -1072
      ],
      "id": "1c365db8-21fe-4702-b2aa-92357e74ba59",
      "name": "Wait2",
      "webhookId": "77327523-e3c8-4f0d-9689-caef73513c63"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -2272,
        -1072
      ],
      "id": "c3bd4522-9f8b-482f-bd5c-8b39a10d0229",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "// ============================================\n// CONTROLE DE INTERAÇÕES - N8N CODE NODE\n// Simplificado para retorno do contador\n// ============================================\n\n// Recupera memória agregada para este usuário\nlet memoryData = null;\ntry {\n  const items = $input.all();\n  if (items?.length) {\n    memoryData = items[0]?.json ?? null;\n  }\n} catch {\n  memoryData = null;\n}\n\n// Calcula a interação atual\nlet interactionCount = 1;\nconst messages = memoryData?.messages;\nif (Array.isArray(messages)) {\n  const systemMessages = messages.filter(msg => msg?.system);\n  interactionCount = systemMessages.length + 1;\n}\n\n// Retorna somente o contador (mantendo paired item)\nreturn [{\n  json: {\n    interaction_count: interactionCount\n  },\n  pairedItem: 0\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3376,
        -768
      ],
      "id": "6e2d22c9-8708-42d2-96ce-2016b0b42c32",
      "name": "intertion_count"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{ $('intertion_count').first().json.interaction_count }}",
              "rightValue": "={{ $('mindquest_config').item.json.limit_iteration }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              },
              "id": "20decd9a-8a71-4c52-86de-1891070b3b96"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2208,
        -752
      ],
      "id": "b52fca60-d125-4d53-87e5-2665adcd1886",
      "name": "É a 8ª?"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "fVrO1PaqFuA957u0",
          "mode": "list",
          "cachedResultName": "MindQuest",
          "cachedResultUrl": "/projects/u1M57XAwIiLpPwjp/datatables/fVrO1PaqFuA957u0"
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -5248,
        -752
      ],
      "id": "095ed6f4-2a4d-4a2e-898a-0bdf10c44171",
      "name": "mindquest_config"
    }
  ],
  "pinData": {
    "start": [
      {
        "json": {
          "usr_id": "c6c21a80-b3ea-4159-a46d-e63bfa66e45d",
          "body.instance": "MindQuest",
          "body.data.key.id": "3ADD5C03E4371E6391AB",
          "body.data.key.remoteJid": "5512982389360@s.whatsapp.net",
          "body.data.key.fromMe": false,
          "body.data.pushName": "Aldo",
          "body.data.message.conversation": "Ola",
          "body.data.messageType": "conversation"
        }
      }
    ]
  },
  "connections": {
    "start": {
      "main": [
        [
          {
            "node": "mindquest_config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dados_usr": {
      "main": [
        [
          {
            "node": "Build Keys",
            "type": "main",
            "index": 0
          },
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Keys": {
      "main": [
        [
          {
            "node": "Redis GET Lock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET Lock": {
      "main": [
        [
          {
            "node": "Calcula tempo restante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LOCK ativo?": {
      "main": [
        [
          {
            "node": "Mensagem de Bloqueio (12h)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transcrição",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcrição": {
      "main": [
        [
          {
            "node": "Chat Memory  - Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory  - Get": {
      "main": [
        [
          {
            "node": "intertion_count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "memory": {
      "ai_memory": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory  - Get1",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory - Insert",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory  - Get",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Insert": {
      "main": [
        [
          {
            "node": "Interações (Pré-Agente)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interações (Pré-Agente)": {
      "main": [
        [
          {
            "node": "Mensagem de Bloqueio (12h)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mentor de vida",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "get_history": {
      "ai_tool": [
        [
          {
            "node": "Mentor de vida",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mentor de vida": {
      "main": [
        [
          {
            "node": "organiza_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "organiza_json": {
      "main": [
        [
          {
            "node": "É a 8ª?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory  - Get1": {
      "main": [
        [
          {
            "node": "junta_dados_gravacao",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "junta_dados_gravacao": {
      "main": [
        [
          {
            "node": "Grava_chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Grava_chat": {
      "main": [
        [
          {
            "node": "experts_panas",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Resumo das conversas",
            "type": "main",
            "index": 0
          },
          {
            "node": "experts_humor_energia",
            "type": "main",
            "index": 0
          },
          {
            "node": "experts_sabotadores",
            "type": "main",
            "index": 0
          },
          {
            "node": "Expert_Insights",
            "type": "main",
            "index": 0
          },
          {
            "node": "experts_bigfive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Resumo das conversas",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Resumo das conversas": {
      "main": [
        [
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table": {
      "main": [
        [
          {
            "node": "Gamificação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Delete All (final)": {
      "main": [
        [
          {
            "node": "Redis SET Lock (12h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envia msg ao usr1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envia msg ao usr": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Resumo das conversas",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Calcula tempo restante": {
      "main": [
        [
          {
            "node": "LOCK ativo?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chat Memory - Delete All (final)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem de Bloqueio (12h)": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "intertion_count": {
      "main": [
        [
          {
            "node": "Chat Memory - Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É a 8ª?": {
      "main": [
        [
          {
            "node": "Chat Memory  - Get1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Envia msg ao usr1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Envia msg ao usr",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mindquest_config": {
      "main": [
        [
          {
            "node": "dados_usr",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f1d93ed0-4616-44d8-9b29-b8aa6c8f3736",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8b04959d79052d9a4fde27fe8830b1f9748281331c826275aabfed3697b200b7"
  },
  "id": "aRonGjwfYoY1UUHH",
  "tags": []
}